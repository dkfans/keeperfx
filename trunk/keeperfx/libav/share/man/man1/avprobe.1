.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AVPROBE 1"
.TH AVPROBE 1 "2015-03-07" " " " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
avprobe \- avprobe media prober
.PP
avprobe [options] [\fIinput_file\fR]
.PP
avprobe gathers information from multimedia streams and prints it in
human\- and machine-readable fashion.
.PP
For example it can be used to check the format of the container used
by a multimedia stream and the format and type of each media stream
contained in it.
.PP
If a filename is specified in input, avprobe will try to open and
probe the file content. If the file cannot be opened or recognized as
a multimedia file, a positive exit code is returned.
.PP
avprobe may be employed both as a standalone application or in
combination with a textual filter, which may perform more
sophisticated processing, e.g. statistical processing or plotting.
.PP
Options are used to list some of the formats supported by avprobe or
for specifying which information to display, and for setting how
avprobe will show it.
.PP
avprobe output is designed to be easily parsable by any \s-1INI\s0 or \s-1JSON\s0
parsers.
.PP
All the numerical options, if not specified otherwise, accept in input
a string representing a number, which may contain one of the
\&\s-1SI\s0 unit prefixes, for example 'K', 'M', 'G'.
If 'i' is appended after the prefix, binary prefixes are used,
which are based on powers of 1024 instead of powers of 1000.
The 'B' postfix multiplies the value by 8, and can be
appended after a unit prefix or used alone. This allows using for
example '\s-1KB\s0', 'MiB', 'G' and 'B' as number postfix.
.PP
Options which do not take arguments are boolean options, and set the
corresponding value to true. They can be set to false by prefixing
with \*(L"no\*(R" the option name, for example using \*(L"\-nofoo\*(R" in the
command line will set to false the boolean option with name \*(L"foo\*(R".
.SS "Stream specifiers"
.IX Subsection "Stream specifiers"
Some options are applied per-stream, e.g. bitrate or codec. Stream specifiers
are used to precisely specify which stream(s) does a given option belong to.
.PP
A stream specifier is a string generally appended to the option name and
separated from it by a colon. E.g. \f(CW\*(C`\-codec:a:1 ac3\*(C'\fR option contains
\&\f(CW\*(C`a:1\*(C'\fR stream specifer, which matches the second audio stream. Therefore it
would select the ac3 codec for the second audio stream.
.PP
A stream specifier can match several stream, the option is then applied to all
of them. E.g. the stream specifier in \f(CW\*(C`\-b:a 128k\*(C'\fR matches all audio
streams.
.PP
An empty stream specifier matches all streams, for example \f(CW\*(C`\-codec copy\*(C'\fR
or \f(CW\*(C`\-codec: copy\*(C'\fR would copy all the streams without reencoding.
.PP
Possible forms of stream specifiers are:
.IP "\fIstream_index\fR" 4
.IX Item "stream_index"
Matches the stream with this index. E.g. \f(CW\*(C`\-threads:1 4\*(C'\fR would set the
thread count for the second stream to 4.
.IP "\fIstream_type\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "stream_type[:stream_index]"
\&\fIstream_type\fR is one of: 'v' for video, 'a' for audio, 's' for subtitle,
\&'d' for data and 't' for attachments. If \fIstream_index\fR is given, then
matches stream number \fIstream_index\fR of this type. Otherwise matches all
streams of this type.
.IP "\fBp:\fR\fIprogram_id\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "p:program_id[:stream_index]"
If \fIstream_index\fR is given, then matches stream number \fIstream_index\fR in
program with id \fIprogram_id\fR. Otherwise matches all streams in this program.
.IP "\fBi:\fR\fIstream_id\fR" 4
.IX Item "i:stream_id"
Match the stream by stream id (e.g. \s-1PID\s0 in MPEG-TS container).
.IP "\fBm:\fR\fIkey\fR\fB[:\fR\fIvalue\fR\fB]\fR" 4
.IX Item "m:key[:value]"
Matches streams with the metadata tag \fIkey\fR having the specified value. If
\&\fIvalue\fR is not given, matches streams that contain the given tag with any
value.
.Sp
Note that in \fBavconv\fR, matching by metadata will only work properly for
input files.
.SS "Generic options"
.IX Subsection "Generic options"
These options are shared amongst the av* tools.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Show license.
.IP "\fB\-h, \-?, \-help, \-\-help [\fR\fIarg\fR\fB]\fR" 4
.IX Item "-h, -?, -help, --help [arg]"
Show help. An optional parameter may be specified to print help about a specific
item.
.Sp
Possible values of \fIarg\fR are:
.RS 4
.IP "\fBdecoder=\fR\fIdecoder_name\fR" 4
.IX Item "decoder=decoder_name"
Print detailed information about the decoder named \fIdecoder_name\fR. Use the
\&\fB\-decoders\fR option to get a list of all decoders.
.IP "\fBencoder=\fR\fIencoder_name\fR" 4
.IX Item "encoder=encoder_name"
Print detailed information about the encoder named \fIencoder_name\fR. Use the
\&\fB\-encoders\fR option to get a list of all encoders.
.IP "\fBdemuxer=\fR\fIdemuxer_name\fR" 4
.IX Item "demuxer=demuxer_name"
Print detailed information about the demuxer named \fIdemuxer_name\fR. Use the
\&\fB\-formats\fR option to get a list of all demuxers and muxers.
.IP "\fBmuxer=\fR\fImuxer_name\fR" 4
.IX Item "muxer=muxer_name"
Print detailed information about the muxer named \fImuxer_name\fR. Use the
\&\fB\-formats\fR option to get a list of all muxers and demuxers.
.IP "\fBfilter=\fR\fIfilter_name\fR" 4
.IX Item "filter=filter_name"
Print detailed information about the filter name \fIfilter_name\fR. Use the
\&\fB\-filters\fR option to get a list of all filters.
.RE
.RS 4
.RE
.IP "\fB\-version\fR" 4
.IX Item "-version"
Show version.
.IP "\fB\-formats\fR" 4
.IX Item "-formats"
Show available formats.
.Sp
The fields preceding the format names have the following meanings:
.RS 4
.IP "\fBD\fR" 4
.IX Item "D"
Decoding available
.IP "\fBE\fR" 4
.IX Item "E"
Encoding available
.RE
.RS 4
.RE
.IP "\fB\-codecs\fR" 4
.IX Item "-codecs"
Show all codecs known to libavcodec.
.Sp
Note that the term 'codec' is used throughout this documentation as a shortcut
for what is more correctly called a media bitstream format.
.IP "\fB\-decoders\fR" 4
.IX Item "-decoders"
Show available decoders.
.IP "\fB\-encoders\fR" 4
.IX Item "-encoders"
Show all available encoders.
.IP "\fB\-bsfs\fR" 4
.IX Item "-bsfs"
Show available bitstream filters.
.IP "\fB\-protocols\fR" 4
.IX Item "-protocols"
Show available protocols.
.IP "\fB\-filters\fR" 4
.IX Item "-filters"
Show available libavfilter filters.
.IP "\fB\-pix_fmts\fR" 4
.IX Item "-pix_fmts"
Show available pixel formats.
.IP "\fB\-sample_fmts\fR" 4
.IX Item "-sample_fmts"
Show available sample formats.
.IP "\fB\-loglevel\fR \fIloglevel\fR \fB| \-v\fR \fIloglevel\fR" 4
.IX Item "-loglevel loglevel | -v loglevel"
Set the logging level used by the library.
\&\fIloglevel\fR is a number or a string containing one of the following values:
.RS 4
.IP "\fBquiet\fR" 4
.IX Item "quiet"
.PD 0
.IP "\fBpanic\fR" 4
.IX Item "panic"
.IP "\fBfatal\fR" 4
.IX Item "fatal"
.IP "\fBerror\fR" 4
.IX Item "error"
.IP "\fBwarning\fR" 4
.IX Item "warning"
.IP "\fBinfo\fR" 4
.IX Item "info"
.IP "\fBverbose\fR" 4
.IX Item "verbose"
.IP "\fBdebug\fR" 4
.IX Item "debug"
.RE
.RS 4
.PD
.Sp
By default the program logs to stderr, if coloring is supported by the
terminal, colors are used to mark errors and warnings. Log coloring
can be disabled setting the environment variable
\&\fB\s-1AV_LOG_FORCE_NOCOLOR\s0\fR or \fB\s-1NO_COLOR\s0\fR, or can be forced setting
the environment variable \fB\s-1AV_LOG_FORCE_COLOR\s0\fR.
The use of the environment variable \fB\s-1NO_COLOR\s0\fR is deprecated and
will be dropped in a following Libav version.
.RE
.IP "\fB\-cpuflags mask (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-cpuflags mask (global)"
Set a mask that's applied to autodetected \s-1CPU\s0 flags. This option is intended
for testing. Do not use it unless you know what you're doing.
.SS "AVOptions"
.IX Subsection "AVOptions"
These options are provided directly by the libavformat, libavdevice and
libavcodec libraries. To see the list of available AVOptions, use the
\&\fB\-help\fR option. They are separated into two categories:
.IP "\fBgeneric\fR" 4
.IX Item "generic"
These options can be set for any container, codec or device. Generic options
are listed under AVFormatContext options for containers/devices and under
AVCodecContext options for codecs.
.IP "\fBprivate\fR" 4
.IX Item "private"
These options are specific to the given container, device or codec. Private
options are listed under their corresponding containers/devices/codecs.
.PP
For example to write an ID3v2.3 header instead of a default ID3v2.4 to
an \s-1MP3\s0 file, use the \fBid3v2_version\fR private option of the \s-1MP3\s0
muxer:
.PP
.Vb 1
\&        avconv \-i input.flac \-id3v2_version 3 out.mp3
.Ve
.PP
All codec AVOptions are obviously per-stream, so the chapter on stream
specifiers applies to them
.PP
Note \fB\-nooption\fR syntax cannot be used for boolean AVOptions,
use \fB\-option 0\fR/\fB\-option 1\fR.
.PP
Note2 old undocumented way of specifying per-stream AVOptions by prepending
v/a/s to the options name is now obsolete and will be removed soon.
.SS "Codec AVOptions"
.IX Subsection "Codec AVOptions"
.IP "\fB\-b[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-b[:stream_specifier] integer (output,audio,video)"
set bitrate (in bits/s)
.IP "\fB\-bt[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-bt[:stream_specifier] integer (output,video)"
Set video bitrate tolerance (in bits/s). In 1\-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.
.IP "\fB\-flags[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-flags[:stream_specifier] flags (input/output,audio,video)"
Possible values:
.RS 4
.IP "\fBunaligned\fR" 4
.IX Item "unaligned"
allow decoders to produce unaligned output
.IP "\fBmv4\fR" 4
.IX Item "mv4"
use four motion vectors per macroblock (\s-1MPEG\-4\s0)
.IP "\fBqpel\fR" 4
.IX Item "qpel"
use 1/4\-pel motion compensation
.IP "\fBloop\fR" 4
.IX Item "loop"
use loop filter
.IP "\fBqscale\fR" 4
.IX Item "qscale"
use fixed qscale
.IP "\fBgmc\fR" 4
.IX Item "gmc"
use gmc
.IP "\fBmv0\fR" 4
.IX Item "mv0"
always try a mb with mv=<0,0>
.IP "\fBinput_preserved\fR" 4
.IX Item "input_preserved"
.PD 0
.IP "\fBpass1\fR" 4
.IX Item "pass1"
.PD
use internal 2\-pass ratecontrol in first  pass mode
.IP "\fBpass2\fR" 4
.IX Item "pass2"
use internal 2\-pass ratecontrol in second pass mode
.IP "\fBgray\fR" 4
.IX Item "gray"
only decode/encode grayscale
.IP "\fBemu_edge\fR" 4
.IX Item "emu_edge"
do not draw edges
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
error[?] variables will be set during encoding
.IP "\fBtruncated\fR" 4
.IX Item "truncated"
.PD 0
.IP "\fBnaq\fR" 4
.IX Item "naq"
.PD
normalize adaptive quantization
.IP "\fBildct\fR" 4
.IX Item "ildct"
use interlaced \s-1DCT\s0
.IP "\fBlow_delay\fR" 4
.IX Item "low_delay"
force low delay
.IP "\fBglobal_header\fR" 4
.IX Item "global_header"
place global headers in extradata instead of every keyframe
.IP "\fBbitexact\fR" 4
.IX Item "bitexact"
use only bitexact functions (except (I)DCT)
.IP "\fBaic\fR" 4
.IX Item "aic"
H.263 advanced intra coding / \s-1MPEG\-4 AC\s0 prediction
.IP "\fBilme\fR" 4
.IX Item "ilme"
interlaced motion estimation
.IP "\fBcgop\fR" 4
.IX Item "cgop"
closed \s-1GOP\s0
.IP "\fBoutput_corrupt\fR" 4
.IX Item "output_corrupt"
Output even potentially corrupted frames
.RE
.RS 4
.RE
.IP "\fB\-me_method[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-me_method[:stream_specifier] integer (output,video)"
set motion estimation method
.Sp
Possible values:
.RS 4
.IP "\fBzero\fR" 4
.IX Item "zero"
zero motion estimation (fastest)
.IP "\fBfull\fR" 4
.IX Item "full"
full motion estimation (slowest)
.IP "\fBepzs\fR" 4
.IX Item "epzs"
\&\s-1EPZS\s0 motion estimation (default)
.IP "\fBesa\fR" 4
.IX Item "esa"
esa motion estimation (alias for full)
.IP "\fBtesa\fR" 4
.IX Item "tesa"
tesa motion estimation
.IP "\fBdia\fR" 4
.IX Item "dia"
diamond motion estimation (alias for \s-1EPZS\s0)
.IP "\fBlog\fR" 4
.IX Item "log"
log motion estimation
.IP "\fBphods\fR" 4
.IX Item "phods"
phods motion estimation
.IP "\fBx1\fR" 4
.IX Item "x1"
X1 motion estimation
.IP "\fBhex\fR" 4
.IX Item "hex"
hex motion estimation
.IP "\fBumh\fR" 4
.IX Item "umh"
umh motion estimation
.RE
.RS 4
.RE
.IP "\fB\-g[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-g[:stream_specifier] integer (output,video)"
set the group of picture (\s-1GOP\s0) size
.IP "\fB\-ar[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio\fR\fB)\fR" 4
.IX Item "-ar[:stream_specifier] integer (input/output,audio)"
set audio sampling rate (in Hz)
.IP "\fB\-ac[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio\fR\fB)\fR" 4
.IX Item "-ac[:stream_specifier] integer (input/output,audio)"
set number of audio channels
.IP "\fB\-cutoff[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-cutoff[:stream_specifier] integer (output,audio)"
set cutoff bandwidth
.IP "\fB\-frame_size[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-frame_size[:stream_specifier] integer (output,audio)"
.PD 0
.IP "\fB\-qcomp[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qcomp[:stream_specifier] float (output,video)"
.PD
video quantizer scale compression (\s-1VBR\s0). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0\-1.0
.IP "\fB\-qblur[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qblur[:stream_specifier] float (output,video)"
video quantizer scale blur (\s-1VBR\s0)
.IP "\fB\-qmin[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qmin[:stream_specifier] integer (output,video)"
minimum video quantizer scale (\s-1VBR\s0)
.IP "\fB\-qmax[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qmax[:stream_specifier] integer (output,video)"
maximum video quantizer scale (\s-1VBR\s0)
.IP "\fB\-qdiff[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qdiff[:stream_specifier] integer (output,video)"
maximum difference between the quantizer scales (\s-1VBR\s0)
.IP "\fB\-bf[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-bf[:stream_specifier] integer (output,video)"
use 'frames' B frames
.IP "\fB\-b_qfactor[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_qfactor[:stream_specifier] float (output,video)"
\&\s-1QP\s0 factor between P\- and B\-frames
.IP "\fB\-rc_strategy[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_strategy[:stream_specifier] integer (output,video)"
ratecontrol method
.IP "\fB\-b_strategy[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_strategy[:stream_specifier] integer (output,video)"
strategy to choose between I/P/B\-frames
.IP "\fB\-ps[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-ps[:stream_specifier] integer (output,video)"
\&\s-1RTP\s0 payload size in bytes
.IP "\fB\-bug[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-bug[:stream_specifier] flags (input,video)"
work around not autodetected encoder bugs
.Sp
Possible values:
.RS 4
.IP "\fBautodetect\fR" 4
.IX Item "autodetect"
.PD 0
.IP "\fBold_msmpeg4\fR" 4
.IX Item "old_msmpeg4"
.PD
some old lavc-generated MSMPEG4v3 files (no autodetection)
.IP "\fBxvid_ilace\fR" 4
.IX Item "xvid_ilace"
Xvid interlacing bug (autodetected if \s-1FOURCC\s0 == \s-1XVIX\s0)
.IP "\fBump4\fR" 4
.IX Item "ump4"
(autodetected if \s-1FOURCC\s0 == \s-1UMP4\s0)
.IP "\fBno_padding\fR" 4
.IX Item "no_padding"
padding bug (autodetected)
.IP "\fBamv\fR" 4
.IX Item "amv"
.PD 0
.IP "\fBac_vlc\fR" 4
.IX Item "ac_vlc"
.PD
illegal \s-1VLC\s0 bug (autodetected per \s-1FOURCC\s0)
.IP "\fBqpel_chroma\fR" 4
.IX Item "qpel_chroma"
.PD 0
.IP "\fBstd_qpel\fR" 4
.IX Item "std_qpel"
.PD
old standard qpel (autodetected per FOURCC/version)
.IP "\fBqpel_chroma2\fR" 4
.IX Item "qpel_chroma2"
.PD 0
.IP "\fBdirect_blocksize\fR" 4
.IX Item "direct_blocksize"
.PD
direct-qpel-blocksize bug (autodetected per FOURCC/version)
.IP "\fBedge\fR" 4
.IX Item "edge"
edge padding bug (autodetected per FOURCC/version)
.IP "\fBhpel_chroma\fR" 4
.IX Item "hpel_chroma"
.PD 0
.IP "\fBdc_clip\fR" 4
.IX Item "dc_clip"
.IP "\fBms\fR" 4
.IX Item "ms"
.PD
work around various bugs in Microsoft's broken decoders
.IP "\fBtrunc\fR" 4
.IX Item "trunc"
truncated frames
.RE
.RS 4
.RE
.IP "\fB\-strict[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-strict[:stream_specifier] integer (input/output,audio,video)"
how strictly to follow the standards
.Sp
Possible values:
.RS 4
.IP "\fBvery\fR" 4
.IX Item "very"
strictly conform to a older more strict version of the spec or reference software
.IP "\fBstrict\fR" 4
.IX Item "strict"
strictly conform to all the things in the spec no matter what the consequences
.IP "\fBnormal\fR" 4
.IX Item "normal"
.PD 0
.IP "\fBunofficial\fR" 4
.IX Item "unofficial"
.PD
allow unofficial extensions
.IP "\fBexperimental\fR" 4
.IX Item "experimental"
allow non-standardized experimental things
.RE
.RS 4
.RE
.IP "\fB\-b_qoffset[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_qoffset[:stream_specifier] float (output,video)"
\&\s-1QP\s0 offset between P\- and B\-frames
.IP "\fB\-err_detect[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput,audio,video\fR\fB)\fR" 4
.IX Item "-err_detect[:stream_specifier] flags (input,audio,video)"
set error detection flags
.Sp
Possible values:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream specification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decoding on minor error detection
.RE
.RS 4
.RE
.IP "\fB\-mpeg_quant[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mpeg_quant[:stream_specifier] integer (output,video)"
use \s-1MPEG\s0 quantizers instead of H.263
.IP "\fB\-qsquish[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qsquish[:stream_specifier] float (output,video)"
how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)
.IP "\fB\-rc_qmod_amp[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_qmod_amp[:stream_specifier] float (output,video)"
experimental quantizer modulation
.IP "\fB\-rc_qmod_freq[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_qmod_freq[:stream_specifier] integer (output,video)"
experimental quantizer modulation
.IP "\fB\-rc_eq[:stream_specifier]\fR \fIstring\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_eq[:stream_specifier] string (output,video)"
Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.
.IP "\fB\-maxrate[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-maxrate[:stream_specifier] integer (output,audio,video)"
Set maximum bitrate tolerance (in bits/s). Requires bufsize to be set.
.IP "\fB\-minrate[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-minrate[:stream_specifier] integer (output,audio,video)"
Set minimum bitrate tolerance (in bits/s). Most useful in setting up a \s-1CBR\s0 encode. It is of little use otherwise.
.IP "\fB\-bufsize[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-bufsize[:stream_specifier] integer (output,audio,video)"
set ratecontrol buffer size (in bits)
.IP "\fB\-rc_buf_aggressivity[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_buf_aggressivity[:stream_specifier] float (output,video)"
currently useless
.IP "\fB\-i_qfactor[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-i_qfactor[:stream_specifier] float (output,video)"
\&\s-1QP\s0 factor between P\- and I\-frames
.IP "\fB\-i_qoffset[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-i_qoffset[:stream_specifier] float (output,video)"
\&\s-1QP\s0 offset between P\- and I\-frames
.IP "\fB\-rc_init_cplx[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_init_cplx[:stream_specifier] float (output,video)"
initial complexity for 1\-pass encoding
.IP "\fB\-dct[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dct[:stream_specifier] integer (output,video)"
\&\s-1DCT\s0 algorithm
.Sp
Possible values:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
autoselect a good one (default)
.IP "\fBfastint\fR" 4
.IX Item "fastint"
fast integer
.IP "\fBint\fR" 4
.IX Item "int"
accurate integer
.IP "\fBmmx\fR" 4
.IX Item "mmx"
.PD 0
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.IP "\fBfaan\fR" 4
.IX Item "faan"
.PD
floating point \s-1AAN DCT\s0
.RE
.RS 4
.RE
.IP "\fB\-lumi_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lumi_mask[:stream_specifier] float (output,video)"
compresses bright areas stronger than medium ones
.IP "\fB\-tcplx_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-tcplx_mask[:stream_specifier] float (output,video)"
temporal complexity masking
.IP "\fB\-scplx_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-scplx_mask[:stream_specifier] float (output,video)"
spatial complexity masking
.IP "\fB\-p_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-p_mask[:stream_specifier] float (output,video)"
inter masking
.IP "\fB\-dark_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dark_mask[:stream_specifier] float (output,video)"
compresses dark areas stronger than medium ones
.IP "\fB\-idct[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-idct[:stream_specifier] integer (input/output,video)"
select \s-1IDCT\s0 implementation
.Sp
Possible values:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
.PD 0
.IP "\fBint\fR" 4
.IX Item "int"
.IP "\fBsimple\fR" 4
.IX Item "simple"
.IP "\fBsimplemmx\fR" 4
.IX Item "simplemmx"
.IP "\fBarm\fR" 4
.IX Item "arm"
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.IP "\fBsh4\fR" 4
.IX Item "sh4"
.IP "\fBsimplearm\fR" 4
.IX Item "simplearm"
.IP "\fBsimplearmv5te\fR" 4
.IX Item "simplearmv5te"
.IP "\fBsimplearmv6\fR" 4
.IX Item "simplearmv6"
.IP "\fBsimpleneon\fR" 4
.IX Item "simpleneon"
.IP "\fBsimplealpha\fR" 4
.IX Item "simplealpha"
.IP "\fBipp\fR" 4
.IX Item "ipp"
.IP "\fBxvid\fR" 4
.IX Item "xvid"
.IP "\fBxvidmmx\fR" 4
.IX Item "xvidmmx"
.IP "\fBfaani\fR" 4
.IX Item "faani"
.PD
floating point \s-1AAN IDCT\s0
.RE
.RS 4
.RE
.IP "\fB\-ec[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-ec[:stream_specifier] flags (input,video)"
set error concealment strategy
.Sp
Possible values:
.RS 4
.IP "\fBguess_mvs\fR" 4
.IX Item "guess_mvs"
iterative motion vector (\s-1MV\s0) search (slow)
.IP "\fBdeblock\fR" 4
.IX Item "deblock"
use strong deblock filter for damaged MBs
.RE
.RS 4
.RE
.IP "\fB\-pred[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-pred[:stream_specifier] integer (output,video)"
prediction method
.Sp
Possible values:
.RS 4
.IP "\fBleft\fR" 4
.IX Item "left"
.PD 0
.IP "\fBplane\fR" 4
.IX Item "plane"
.IP "\fBmedian\fR" 4
.IX Item "median"
.RE
.RS 4
.RE
.IP "\fB\-aspect[:stream_specifier]\fR \fIrational number\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-aspect[:stream_specifier] rational number (output,video)"
.PD
sample aspect ratio
.IP "\fB\-debug[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,audio,video,subtitles\fR\fB)\fR" 4
.IX Item "-debug[:stream_specifier] flags (input/output,audio,video,subtitles)"
print specific debug info
.Sp
Possible values:
.RS 4
.IP "\fBpict\fR" 4
.IX Item "pict"
picture info
.IP "\fBrc\fR" 4
.IX Item "rc"
rate control
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
.PD 0
.IP "\fBmb_type\fR" 4
.IX Item "mb_type"
.PD
macroblock (\s-1MB\s0) type
.IP "\fBqp\fR" 4
.IX Item "qp"
per-block quantization parameter (\s-1QP\s0)
.IP "\fBmv\fR" 4
.IX Item "mv"
motion vector
.IP "\fBdct_coeff\fR" 4
.IX Item "dct_coeff"
.PD 0
.IP "\fBskip\fR" 4
.IX Item "skip"
.IP "\fBstartcode\fR" 4
.IX Item "startcode"
.IP "\fBpts\fR" 4
.IX Item "pts"
.IP "\fBer\fR" 4
.IX Item "er"
.PD
error recognition
.IP "\fBmmco\fR" 4
.IX Item "mmco"
memory management control operations (H.264)
.IP "\fBbugs\fR" 4
.IX Item "bugs"
.PD 0
.IP "\fBvis_qp\fR" 4
.IX Item "vis_qp"
.PD
visualize quantization parameter (\s-1QP\s0), lower \s-1QP\s0 are tinted greener
.IP "\fBvis_mb_type\fR" 4
.IX Item "vis_mb_type"
visualize block types
.IP "\fBbuffers\fR" 4
.IX Item "buffers"
picture buffer allocations
.IP "\fBthread_ops\fR" 4
.IX Item "thread_ops"
threading operations
.RE
.RS 4
.RE
.IP "\fB\-vismv[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-vismv[:stream_specifier] integer (input,video)"
visualize motion vectors (MVs)
.Sp
Possible values:
.RS 4
.IP "\fBpf\fR" 4
.IX Item "pf"
forward predicted MVs of P\-frames
.IP "\fBbf\fR" 4
.IX Item "bf"
forward predicted MVs of B\-frames
.IP "\fBbb\fR" 4
.IX Item "bb"
backward predicted MVs of B\-frames
.RE
.RS 4
.RE
.IP "\fB\-cmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-cmp[:stream_specifier] integer (output,video)"
full-pel \s-1ME\s0 compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-subcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-subcmp[:stream_specifier] integer (output,video)"
.PD
sub-pel \s-1ME\s0 compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-mbcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mbcmp[:stream_specifier] integer (output,video)"
.PD
macroblock compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-ildctcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-ildctcmp[:stream_specifier] integer (output,video)"
.PD
interlaced \s-1DCT\s0 compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-dia_size[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dia_size[:stream_specifier] integer (output,video)"
.PD
diamond type & size for motion estimation
.IP "\fB\-last_pred[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-last_pred[:stream_specifier] integer (output,video)"
amount of motion predictors from the previous frame
.IP "\fB\-preme[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-preme[:stream_specifier] integer (output,video)"
pre motion estimation
.IP "\fB\-precmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-precmp[:stream_specifier] integer (output,video)"
pre motion estimation compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-pre_dia_size[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-pre_dia_size[:stream_specifier] integer (output,video)"
.PD
diamond type & size for motion estimation pre-pass
.IP "\fB\-subq[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-subq[:stream_specifier] integer (output,video)"
sub-pel motion estimation quality
.IP "\fB\-me_range[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-me_range[:stream_specifier] integer (output,video)"
limit motion vectors range (1023 for DivX player)
.IP "\fB\-ibias[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-ibias[:stream_specifier] integer (output,video)"
intra quant bias
.IP "\fB\-pbias[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-pbias[:stream_specifier] integer (output,video)"
inter quant bias
.IP "\fB\-global_quality[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-global_quality[:stream_specifier] integer (output,audio,video)"
.PD 0
.IP "\fB\-coder[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-coder[:stream_specifier] integer (output,video)"
.PD
Possible values:
.RS 4
.IP "\fBvlc\fR" 4
.IX Item "vlc"
variable length coder / Huffman coder
.IP "\fBac\fR" 4
.IX Item "ac"
arithmetic coder
.IP "\fBraw\fR" 4
.IX Item "raw"
raw (no encoding)
.IP "\fBrle\fR" 4
.IX Item "rle"
run-length coder
.IP "\fBdeflate\fR" 4
.IX Item "deflate"
deflate-based coder
.RE
.RS 4
.RE
.IP "\fB\-context[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-context[:stream_specifier] integer (output,video)"
context model
.IP "\fB\-mbd[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mbd[:stream_specifier] integer (output,video)"
macroblock decision algorithm (high quality mode)
.Sp
Possible values:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
use mbcmp (default)
.IP "\fBbits\fR" 4
.IX Item "bits"
use fewest bits
.IP "\fBrd\fR" 4
.IX Item "rd"
use best rate distortion
.RE
.RS 4
.RE
.IP "\fB\-sc_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-sc_threshold[:stream_specifier] integer (output,video)"
scene change threshold
.IP "\fB\-lmin[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lmin[:stream_specifier] integer (output,video)"
minimum Lagrange factor (\s-1VBR\s0)
.IP "\fB\-lmax[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lmax[:stream_specifier] integer (output,video)"
maximum Lagrange factor (\s-1VBR\s0)
.IP "\fB\-nr[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-nr[:stream_specifier] integer (output,video)"
noise reduction
.IP "\fB\-rc_init_occupancy[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_init_occupancy[:stream_specifier] integer (output,video)"
number of bits which should be loaded into the rc buffer before decoding starts
.IP "\fB\-flags2[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-flags2[:stream_specifier] flags (input/output,audio,video)"
Possible values:
.RS 4
.IP "\fBfast\fR" 4
.IX Item "fast"
allow non-spec-compliant speedup tricks
.IP "\fBnoout\fR" 4
.IX Item "noout"
skip bitstream encoding
.IP "\fBignorecrop\fR" 4
.IX Item "ignorecrop"
ignore cropping information from sps
.IP "\fBlocal_header\fR" 4
.IX Item "local_header"
place global headers at every keyframe instead of in extradata
.RE
.RS 4
.RE
.IP "\fB\-error[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-error[:stream_specifier] integer (output,video)"
.PD 0
.IP "\fB\-threads[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-threads[:stream_specifier] integer (input/output,video)"
.PD
Possible values:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
autodetect a suitable number of threads to use
.RE
.RS 4
.RE
.IP "\fB\-me_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-me_threshold[:stream_specifier] integer (output,video)"
motion estimation threshold
.IP "\fB\-mb_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mb_threshold[:stream_specifier] integer (output,video)"
macroblock threshold
.IP "\fB\-dc[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dc[:stream_specifier] integer (output,video)"
intra_dc_precision
.IP "\fB\-nssew[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-nssew[:stream_specifier] integer (output,video)"
nsse weight
.IP "\fB\-skip_top[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_top[:stream_specifier] integer (input,video)"
number of macroblock rows at the top which are skipped
.IP "\fB\-skip_bottom[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_bottom[:stream_specifier] integer (input,video)"
number of macroblock rows at the bottom which are skipped
.IP "\fB\-profile[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-profile[:stream_specifier] integer (output,audio,video)"
Possible values:
.RS 4
.IP "\fBunknown\fR" 4
.IX Item "unknown"
.PD 0
.IP "\fBaac_main\fR" 4
.IX Item "aac_main"
.IP "\fBaac_low\fR" 4
.IX Item "aac_low"
.IP "\fBaac_ssr\fR" 4
.IX Item "aac_ssr"
.IP "\fBaac_ltp\fR" 4
.IX Item "aac_ltp"
.IP "\fBaac_he\fR" 4
.IX Item "aac_he"
.IP "\fBaac_he_v2\fR" 4
.IX Item "aac_he_v2"
.IP "\fBaac_ld\fR" 4
.IX Item "aac_ld"
.IP "\fBaac_eld\fR" 4
.IX Item "aac_eld"
.IP "\fBmpeg2_aac_low\fR" 4
.IX Item "mpeg2_aac_low"
.IP "\fBmpeg2_aac_he\fR" 4
.IX Item "mpeg2_aac_he"
.IP "\fBdts\fR" 4
.IX Item "dts"
.IP "\fBdts_es\fR" 4
.IX Item "dts_es"
.IP "\fBdts_96_24\fR" 4
.IX Item "dts_96_24"
.IP "\fBdts_hd_hra\fR" 4
.IX Item "dts_hd_hra"
.IP "\fBdts_hd_ma\fR" 4
.IX Item "dts_hd_ma"
.RE
.RS 4
.RE
.IP "\fB\-level[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-level[:stream_specifier] integer (output,audio,video)"
.PD
Possible values:
.RS 4
.IP "\fBunknown\fR" 4
.IX Item "unknown"
.RE
.RS 4
.RE
.PD 0
.IP "\fB\-skip_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skip_threshold[:stream_specifier] integer (output,video)"
.PD
frame skip threshold
.IP "\fB\-skip_factor[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skip_factor[:stream_specifier] integer (output,video)"
frame skip factor
.IP "\fB\-skip_exp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skip_exp[:stream_specifier] integer (output,video)"
frame skip exponent
.IP "\fB\-skipcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skipcmp[:stream_specifier] integer (output,video)"
frame skip compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-border_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-border_mask[:stream_specifier] float (output,video)"
.PD
increase the quantizer for macroblocks close to borders
.IP "\fB\-mblmin[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mblmin[:stream_specifier] integer (output,video)"
minimum macroblock Lagrange factor (\s-1VBR\s0)
.IP "\fB\-mblmax[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mblmax[:stream_specifier] integer (output,video)"
maximum macroblock Lagrange factor (\s-1VBR\s0)
.IP "\fB\-mepc[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mepc[:stream_specifier] integer (output,video)"
motion estimation bitrate penalty compensation (1.0 = 256)
.IP "\fB\-skip_loop_filter[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_loop_filter[:stream_specifier] integer (input,video)"
Possible values:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBnoref\fR" 4
.IX Item "noref"
.IP "\fBbidir\fR" 4
.IX Item "bidir"
.IP "\fBnokey\fR" 4
.IX Item "nokey"
.IP "\fBall\fR" 4
.IX Item "all"
.RE
.RS 4
.RE
.IP "\fB\-skip_idct[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_idct[:stream_specifier] integer (input,video)"
.PD
Possible values:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBnoref\fR" 4
.IX Item "noref"
.IP "\fBbidir\fR" 4
.IX Item "bidir"
.IP "\fBnokey\fR" 4
.IX Item "nokey"
.IP "\fBall\fR" 4
.IX Item "all"
.RE
.RS 4
.RE
.IP "\fB\-skip_frame[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_frame[:stream_specifier] integer (input,video)"
.PD
Possible values:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBnoref\fR" 4
.IX Item "noref"
.IP "\fBbidir\fR" 4
.IX Item "bidir"
.IP "\fBnokey\fR" 4
.IX Item "nokey"
.IP "\fBall\fR" 4
.IX Item "all"
.RE
.RS 4
.RE
.IP "\fB\-bidir_refine[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-bidir_refine[:stream_specifier] integer (output,video)"
.PD
refine the two motion vectors used in bidirectional macroblocks
.IP "\fB\-brd_scale[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-brd_scale[:stream_specifier] integer (output,video)"
downscale frames for dynamic B\-frame decision
.IP "\fB\-keyint_min[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-keyint_min[:stream_specifier] integer (output,video)"
minimum interval between IDR-frames (x264)
.IP "\fB\-refs[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-refs[:stream_specifier] integer (output,video)"
reference frames to consider for motion compensation
.IP "\fB\-chromaoffset[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-chromaoffset[:stream_specifier] integer (output,video)"
chroma \s-1QP\s0 offset from luma
.IP "\fB\-trellis[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-trellis[:stream_specifier] integer (output,audio,video)"
rate-distortion optimal quantization
.IP "\fB\-sc_factor[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-sc_factor[:stream_specifier] integer (output,video)"
multiplied by qscale for each frame and added to scene_change_score
.IP "\fB\-mv0_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mv0_threshold[:stream_specifier] integer (output,video)"
.PD 0
.IP "\fB\-b_sensitivity[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_sensitivity[:stream_specifier] integer (output,video)"
.PD
adjust sensitivity of b_frame_strategy 1
.IP "\fB\-compression_level[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-compression_level[:stream_specifier] integer (output,audio,video)"
.PD 0
.IP "\fB\-min_prediction_order[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-min_prediction_order[:stream_specifier] integer (output,audio)"
.IP "\fB\-max_prediction_order[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-max_prediction_order[:stream_specifier] integer (output,audio)"
.IP "\fB\-timecode_frame_start[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-timecode_frame_start[:stream_specifier] integer (output,video)"
.PD
\&\s-1GOP\s0 timecode frame start number, in non-drop-frame format
.IP "\fB\-request_channels[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio\fR\fB)\fR" 4
.IX Item "-request_channels[:stream_specifier] integer (input,audio)"
set desired number of audio channels
.IP "\fB\-channel_layout[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio\fR\fB)\fR" 4
.IX Item "-channel_layout[:stream_specifier] integer (input/output,audio)"
Possible values:
.IP "\fB\-request_channel_layout[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio\fR\fB)\fR" 4
.IX Item "-request_channel_layout[:stream_specifier] integer (input,audio)"
Possible values:
.IP "\fB\-rc_max_vbv_use[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_max_vbv_use[:stream_specifier] float (output,video)"
.PD 0
.IP "\fB\-rc_min_vbv_use[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_min_vbv_use[:stream_specifier] float (output,video)"
.IP "\fB\-ticks_per_frame[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-ticks_per_frame[:stream_specifier] integer (input/output,audio,video)"
.IP "\fB\-color_primaries[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-color_primaries[:stream_specifier] integer (input/output,video)"
.PD
color primaries
.Sp
Possible values:
.RS 4
.IP "\fBbt709\fR" 4
.IX Item "bt709"
\&\s-1BT.709\s0
.IP "\fBunspecified\fR" 4
.IX Item "unspecified"
Unspecified
.IP "\fBbt470m\fR" 4
.IX Item "bt470m"
\&\s-1BT.470 M\s0
.IP "\fBbt470bg\fR" 4
.IX Item "bt470bg"
\&\s-1BT.470 BG\s0
.IP "\fBsmpte170m\fR" 4
.IX Item "smpte170m"
\&\s-1SMPTE 170 M\s0
.IP "\fBsmpte240m\fR" 4
.IX Item "smpte240m"
\&\s-1SMPTE 240 M\s0
.IP "\fBfilm\fR" 4
.IX Item "film"
Film
.IP "\fBbt2020\fR" 4
.IX Item "bt2020"
\&\s-1BT.2020\s0
.RE
.RS 4
.RE
.IP "\fB\-color_trc[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-color_trc[:stream_specifier] integer (input/output,video)"
color transfert characteristic
.Sp
Possible values:
.RS 4
.IP "\fBbt709\fR" 4
.IX Item "bt709"
\&\s-1BT.709\s0
.IP "\fBunspecified\fR" 4
.IX Item "unspecified"
Unspecified
.IP "\fBgamma22\fR" 4
.IX Item "gamma22"
Gamma 2.2
.IP "\fBgamma28\fR" 4
.IX Item "gamma28"
Gamma 2.8
.IP "\fBsmpte170m\fR" 4
.IX Item "smpte170m"
\&\s-1SMPTE 170 M\s0
.IP "\fBsmpte240m\fR" 4
.IX Item "smpte240m"
\&\s-1SMPTE 240 M\s0
.IP "\fBlinear\fR" 4
.IX Item "linear"
Linear
.IP "\fBlog\fR" 4
.IX Item "log"
\&\s-1SMPTE 240 M\s0
.IP "\fBlog_sqrt\fR" 4
.IX Item "log_sqrt"
\&\s-1SMPTE 240 M\s0
.IP "\fBiec61966_2_4\fR" 4
.IX Item "iec61966_2_4"
\&\s-1SMPTE 240 M\s0
.IP "\fBbt1361\fR" 4
.IX Item "bt1361"
\&\s-1BT.1361\s0
.IP "\fBiec61966_2_1\fR" 4
.IX Item "iec61966_2_1"
\&\s-1SMPTE 240 M\s0
.IP "\fBbt2020_10bit\fR" 4
.IX Item "bt2020_10bit"
\&\s-1BT.2020 \- 10\s0 bit
.IP "\fBbt2020_12bit\fR" 4
.IX Item "bt2020_12bit"
\&\s-1BT.2020 \- 12\s0 bit
.RE
.RS 4
.RE
.IP "\fB\-colorspace[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-colorspace[:stream_specifier] integer (input/output,video)"
colorspace
.Sp
Possible values:
.RS 4
.IP "\fBrgb\fR" 4
.IX Item "rgb"
\&\s-1RGB\s0
.IP "\fBbt709\fR" 4
.IX Item "bt709"
\&\s-1BT.709\s0
.IP "\fBunspecified\fR" 4
.IX Item "unspecified"
Unspecified
.IP "\fBfcc\fR" 4
.IX Item "fcc"
FourCC
.IP "\fBbt470bg\fR" 4
.IX Item "bt470bg"
\&\s-1BT.470 BG\s0
.IP "\fBsmpte170m\fR" 4
.IX Item "smpte170m"
\&\s-1SMPTE 170 M\s0
.IP "\fBsmpte240m\fR" 4
.IX Item "smpte240m"
\&\s-1SMPTE 240 M\s0
.IP "\fBycocg\fR" 4
.IX Item "ycocg"
\&\s-1YCOCG\s0
.IP "\fBbt2020_ncl\fR" 4
.IX Item "bt2020_ncl"
\&\s-1BT.2020 NCL\s0
.IP "\fBbt2020_cl\fR" 4
.IX Item "bt2020_cl"
\&\s-1BT.2020 CL\s0
.RE
.RS 4
.RE
.IP "\fB\-color_range[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-color_range[:stream_specifier] integer (input/output,video)"
color range
.Sp
Possible values:
.RS 4
.IP "\fBunspecified\fR" 4
.IX Item "unspecified"
Unspecified
.IP "\fBmpeg\fR" 4
.IX Item "mpeg"
\&\s-1MPEG \s0(219*2^(n\-8))
.IP "\fBjpeg\fR" 4
.IX Item "jpeg"
\&\s-1JPEG \s0(2^n\-1)
.RE
.RS 4
.RE
.IP "\fB\-chroma_sample_location[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-chroma_sample_location[:stream_specifier] integer (input/output,video)"
.PD 0
.IP "\fB\-slices[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-slices[:stream_specifier] integer (output,video)"
.PD
number of slices, used in parallelized encoding
.IP "\fB\-thread_type[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-thread_type[:stream_specifier] flags (input/output,video)"
select multithreading type
.Sp
Possible values:
.RS 4
.IP "\fBslice\fR" 4
.IX Item "slice"
.PD 0
.IP "\fBframe\fR" 4
.IX Item "frame"
.RE
.RS 4
.RE
.IP "\fB\-audio_service_type[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-audio_service_type[:stream_specifier] integer (output,audio)"
.PD
audio service type
.Sp
Possible values:
.RS 4
.IP "\fBma\fR" 4
.IX Item "ma"
Main Audio Service
.IP "\fBef\fR" 4
.IX Item "ef"
Effects
.IP "\fBvi\fR" 4
.IX Item "vi"
Visually Impaired
.IP "\fBhi\fR" 4
.IX Item "hi"
Hearing Impaired
.IP "\fBdi\fR" 4
.IX Item "di"
Dialogue
.IP "\fBco\fR" 4
.IX Item "co"
Commentary
.IP "\fBem\fR" 4
.IX Item "em"
Emergency
.IP "\fBvo\fR" 4
.IX Item "vo"
Voice Over
.IP "\fBka\fR" 4
.IX Item "ka"
Karaoke
.RE
.RS 4
.RE
.IP "\fB\-request_sample_fmt[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio\fR\fB)\fR" 4
.IX Item "-request_sample_fmt[:stream_specifier] integer (input,audio)"
Possible values:
.RS 4
.IP "\fBu8\fR" 4
.IX Item "u8"
8\-bit unsigned integer
.IP "\fBs16\fR" 4
.IX Item "s16"
16\-bit signed integer
.IP "\fBs32\fR" 4
.IX Item "s32"
32\-bit signed integer
.IP "\fBflt\fR" 4
.IX Item "flt"
32\-bit float
.IP "\fBdbl\fR" 4
.IX Item "dbl"
64\-bit double
.IP "\fBu8p\fR" 4
.IX Item "u8p"
8\-bit unsigned integer planar
.IP "\fBs16p\fR" 4
.IX Item "s16p"
16\-bit signed integer planar
.IP "\fBs32p\fR" 4
.IX Item "s32p"
32\-bit signed integer planar
.IP "\fBfltp\fR" 4
.IX Item "fltp"
32\-bit float planar
.IP "\fBdblp\fR" 4
.IX Item "dblp"
64\-bit double planar
.RE
.RS 4
.RE
.IP "\fB\-refcounted_frames[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio,video\fR\fB)\fR" 4
.IX Item "-refcounted_frames[:stream_specifier] integer (input,audio,video)"
.PD 0
.IP "\fB\-side_data_only_packets[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-side_data_only_packets[:stream_specifier] integer (output,audio,video)"
.PD
.SS "Format AVOptions"
.IX Subsection "Format AVOptions"
.IP "\fB\-probesize\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-probesize integer (input)"
set probing size
.IP "\fB\-packetsize\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-packetsize integer (output)"
set packet size
.IP "\fB\-fflags\fR \fIflags\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-fflags flags (input/output)"
Possible values:
.RS 4
.IP "\fBflush_packets\fR" 4
.IX Item "flush_packets"
reduce the latency by flushing out packets immediately
.IP "\fBignidx\fR" 4
.IX Item "ignidx"
ignore index
.IP "\fBgenpts\fR" 4
.IX Item "genpts"
generate pts
.IP "\fBnofillin\fR" 4
.IX Item "nofillin"
do not fill in missing values that can be exactly calculated
.IP "\fBnoparse\fR" 4
.IX Item "noparse"
disable AVParsers, this needs nofillin too
.IP "\fBigndts\fR" 4
.IX Item "igndts"
ignore dts
.IP "\fBdiscardcorrupt\fR" 4
.IX Item "discardcorrupt"
discard corrupted frames
.IP "\fBnobuffer\fR" 4
.IX Item "nobuffer"
reduce the latency introduced by optional buffering
.IP "\fBbitexact\fR" 4
.IX Item "bitexact"
do not write random/volatile data
.RE
.RS 4
.RE
.IP "\fB\-analyzeduration\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-analyzeduration integer (input)"
how many microseconds are analyzed to estimate duration
.IP "\fB\-cryptokey\fR \fIhexadecimal string\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-cryptokey hexadecimal string (input)"
decryption key
.IP "\fB\-indexmem\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-indexmem integer (input)"
max memory used for timestamp index (per stream)
.IP "\fB\-rtbufsize\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-rtbufsize integer (input)"
max memory used for buffering real-time frames
.IP "\fB\-fdebug\fR \fIflags\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-fdebug flags (input/output)"
print specific debug info
.Sp
Possible values:
.RS 4
.IP "\fBts\fR" 4
.IX Item "ts"
.RE
.RS 4
.RE
.PD 0
.IP "\fB\-max_delay\fR \fIinteger\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-max_delay integer (input/output)"
.PD
maximum muxing or demuxing delay in microseconds
.IP "\fB\-fpsprobesize\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-fpsprobesize integer (input)"
number of frames used to probe fps
.IP "\fB\-f_err_detect\fR \fIflags\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-f_err_detect flags (input)"
set error detection flags (deprecated; use err_detect, save via avconv)
.Sp
Possible values:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream specification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decoding on minor error detection
.RE
.RS 4
.RE
.IP "\fB\-err_detect\fR \fIflags\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-err_detect flags (input)"
set error detection flags
.Sp
Possible values:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream specification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decoding on minor error detection
.RE
.RS 4
.RE
.IP "\fB\-max_interleave_delta\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-max_interleave_delta integer (output)"
maximum buffering duration for interleaving
.IP "\fB\-f_strict\fR \fIinteger\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-f_strict integer (input/output)"
how strictly to follow the standards (deprecated; use strict, save via avconv)
.Sp
Possible values:
.RS 4
.IP "\fBstrict\fR" 4
.IX Item "strict"
strictly conform to all the things in the spec no matter what the consequences
.IP "\fBnormal\fR" 4
.IX Item "normal"
.PD 0
.IP "\fBexperimental\fR" 4
.IX Item "experimental"
.PD
allow non-standardized experimental variants
.RE
.RS 4
.RE
.IP "\fB\-strict\fR \fIinteger\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-strict integer (input/output)"
how strictly to follow the standards
.Sp
Possible values:
.RS 4
.IP "\fBstrict\fR" 4
.IX Item "strict"
strictly conform to all the things in the spec no matter what the consequences
.IP "\fBnormal\fR" 4
.IX Item "normal"
.PD 0
.IP "\fBexperimental\fR" 4
.IX Item "experimental"
.PD
allow non-standardized experimental variants
.RE
.RS 4
.RE
.SS "Main options"
.IX Subsection "Main options"
.IP "\fB\-f\fR \fIformat\fR" 4
.IX Item "-f format"
Force format to use.
.IP "\fB\-of\fR \fIformatter\fR" 4
.IX Item "-of formatter"
Use a specific formatter to output the document. The following
formatters are available
.RS 4
.IP "\fBini\fR" 4
.IX Item "ini"
.PD 0
.IP "\fBjson\fR" 4
.IX Item "json"
.IP "\fBold\fR" 4
.IX Item "old"
.PD
Pseudo-INI format that used to be the only one available in old
avprobe versions.
.RE
.RS 4
.RE
.IP "\fB\-unit\fR" 4
.IX Item "-unit"
Show the unit of the displayed values.
.IP "\fB\-prefix\fR" 4
.IX Item "-prefix"
Use \s-1SI\s0 prefixes for the displayed values.
Unless the \*(L"\-byte_binary_prefix\*(R" option is used all the prefixes
are decimal.
.IP "\fB\-byte_binary_prefix\fR" 4
.IX Item "-byte_binary_prefix"
Force the use of binary prefixes for byte values.
.IP "\fB\-sexagesimal\fR" 4
.IX Item "-sexagesimal"
Use sexagesimal format \s-1HH:MM:SS.MICROSECONDS\s0 for time values.
.IP "\fB\-pretty\fR" 4
.IX Item "-pretty"
Prettify the format of the displayed values, it corresponds to the
options \*(L"\-unit \-prefix \-byte_binary_prefix \-sexagesimal\*(R".
.IP "\fB\-show_format\fR" 4
.IX Item "-show_format"
Show information about the container format of the input multimedia
stream.
.Sp
All the container format information is printed within a section with
name \*(L"\s-1FORMAT\*(R".\s0
.IP "\fB\-show_format_entry\fR \fIname\fR" 4
.IX Item "-show_format_entry name"
Like \fB\-show_format\fR, but only prints the specified entry of the
container format information, rather than all. This option may be given more
than once, then all specified entries will be shown.
.IP "\fB\-show_packets\fR" 4
.IX Item "-show_packets"
Show information about each packet contained in the input multimedia
stream.
.Sp
The information for each single packet is printed within a dedicated
section with name \*(L"\s-1PACKET\*(R".\s0
.IP "\fB\-show_streams\fR" 4
.IX Item "-show_streams"
Show information about each media stream contained in the input
multimedia stream.
.Sp
Each media stream information is printed within a dedicated section
with name \*(L"\s-1STREAM\*(R".\s0
.PP
Demuxers are configured elements in Libav which allow to read the
multimedia streams from a particular type of file.
.PP
When you configure your Libav build, all the supported demuxers
are enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-demuxers\*(R".
.PP
You can disable all the demuxers using the configure option
\&\*(L"\-\-disable\-demuxers\*(R", and selectively enable a single demuxer with
the option "\-\-enable\-demuxer=\fI\s-1DEMUXER\s0\fR\*(L", or disable it
with the option \*(R"\-\-disable\-demuxer=\fI\s-1DEMUXER\s0\fR".
.PP
The option \*(L"\-formats\*(R" of the av* tools will display the list of
enabled demuxers.
.PP
The description of some of the currently available demuxers follows.
.SS "image2"
.IX Subsection "image2"
Image file demuxer.
.PP
This demuxer reads from a list of image files specified by a pattern.
.PP
The pattern may contain the string \*(L"%d\*(R" or "%0\fIN\fRd\*(L", which
specifies the position of the characters representing a sequential
number in each filename matched by the pattern. If the form
\&\*(R"%d0\fIN\fRd" is used, the string representing the number in each
filename is 0\-padded and \fIN\fR is the total number of 0\-padded
digits representing the number. The literal character '%' can be
specified in the pattern with the string \*(L"%%\*(R".
.PP
If the pattern contains \*(L"%d\*(R" or "%0\fIN\fRd", the first filename of
the file list specified by the pattern must contain a number
inclusively contained between 0 and 4, all the following numbers must
be sequential. This limitation may be hopefully fixed.
.PP
The pattern may contain a suffix which is used to automatically
determine the format of the images contained in the files.
.PP
For example the pattern \*(L"img\-%03d.bmp\*(R" will match a sequence of
filenames of the form \fIimg\-001.bmp\fR, \fIimg\-002.bmp\fR, ...,
\&\fIimg\-010.bmp\fR, etc.; the pattern \*(L"i%%m%%g\-%d.jpg\*(R" will match a
sequence of filenames of the form \fIi%m%g\-1.jpg\fR,
\&\fIi%m%g\-2.jpg\fR, ..., \fIi%m%g\-10.jpg\fR, etc.
.PP
The size, the pixel format, and the format of each image must be the
same for all the files in the sequence.
.PP
The following example shows how to use \fBavconv\fR for creating a
video from the images in the file sequence \fIimg\-001.jpeg\fR,
\&\fIimg\-002.jpeg\fR, ..., assuming an input framerate of 10 frames per
second:
.PP
.Vb 1
\&        avconv \-i \*(Aqimg\-%03d.jpeg\*(Aq \-r 10 out.mkv
.Ve
.PP
Note that the pattern must not necessarily contain \*(L"%d\*(R" or
"%0\fIN\fRd", for example to convert a single image file
\&\fIimg.jpeg\fR you can employ the command:
.PP
.Vb 1
\&        avconv \-i img.jpeg img.png
.Ve
.IP "\fB\-pixel_format\fR \fIformat\fR" 4
.IX Item "-pixel_format format"
Set the pixel format (for raw image)
.IP "\fB\-video_size\fR   \fIsize\fR" 4
.IX Item "-video_size size"
Set the frame size (for raw image)
.IP "\fB\-framerate\fR    \fIrate\fR" 4
.IX Item "-framerate rate"
Set the frame rate
.IP "\fB\-loop\fR         \fIbool\fR" 4
.IX Item "-loop bool"
Loop over the images
.IP "\fB\-start_number\fR \fIstart\fR" 4
.IX Item "-start_number start"
Specify the first number in the sequence
.SS "applehttp"
.IX Subsection "applehttp"
Apple \s-1HTTP\s0 Live Streaming demuxer.
.PP
This demuxer presents all AVStreams from all variant streams.
The id field is set to the bitrate variant index number. By setting
the discard flags on AVStreams (by pressing 'a' or 'v' in avplay),
the caller can decide which variant streams to actually receive.
The total bitrate of the variant that the stream belongs to is
available in a metadata key named \*(L"variant_bitrate\*(R".
.SS "flv"
.IX Subsection "flv"
Adobe Flash Video Format demuxer.
.PP
This demuxer is used to demux \s-1FLV\s0 files and \s-1RTMP\s0 network streams.
.IP "\fB\-flv_metadata\fR \fIbool\fR" 4
.IX Item "-flv_metadata bool"
Allocate the streams according to the onMetaData array content.
.SS "asf"
.IX Subsection "asf"
Advanced Systems Format demuxer.
.PP
This demuxer is used to demux \s-1ASF\s0 files and \s-1MMS\s0 network streams.
.IP "\fB\-no_resync_search\fR \fIbool\fR" 4
.IX Item "-no_resync_search bool"
Do not try to resynchronize by looking for a certain optional start code.
.PP
Muxers are configured elements in Libav which allow writing
multimedia streams to a particular type of file.
.PP
When you configure your Libav build, all the supported muxers
are enabled by default. You can list all available muxers using the
configure option \f(CW\*(C`\-\-list\-muxers\*(C'\fR.
.PP
You can disable all the muxers with the configure option
\&\f(CW\*(C`\-\-disable\-muxers\*(C'\fR and selectively enable / disable single muxers
with the options \f(CW\*(C`\-\-enable\-muxer=\f(CIMUXER\f(CW\*(C'\fR /
\&\f(CW\*(C`\-\-disable\-muxer=\f(CIMUXER\f(CW\*(C'\fR.
.PP
The option \f(CW\*(C`\-formats\*(C'\fR of the av* tools will display the list of
enabled muxers.
.PP
A description of some of the currently available muxers follows.
.SS "crc"
.IX Subsection "crc"
\&\s-1CRC \s0(Cyclic Redundancy Check) testing format.
.PP
This muxer computes and prints the Adler\-32 \s-1CRC\s0 of all the input audio
and video frames. By default audio frames are converted to signed
16\-bit raw audio and video frames to raw video before computing the
\&\s-1CRC.\s0
.PP
The output of the muxer consists of a single line of the form:
CRC=0x\fI\s-1CRC\s0\fR, where \fI\s-1CRC\s0\fR is a hexadecimal number 0\-padded to
8 digits containing the \s-1CRC\s0 for all the decoded input frames.
.PP
For example to compute the \s-1CRC\s0 of the input, and store it in the file
\&\fIout.crc\fR:
.PP
.Vb 1
\&        avconv \-i INPUT \-f crc out.crc
.Ve
.PP
You can print the \s-1CRC\s0 to stdout with the command:
.PP
.Vb 1
\&        avconv \-i INPUT \-f crc \-
.Ve
.PP
You can select the output format of each frame with \fBavconv\fR by
specifying the audio and video codec and format. For example to
compute the \s-1CRC\s0 of the input audio converted to \s-1PCM\s0 unsigned 8\-bit
and the input video converted to \s-1MPEG\-2\s0 video, use the command:
.PP
.Vb 1
\&        avconv \-i INPUT \-c:a pcm_u8 \-c:v mpeg2video \-f crc \-
.Ve
.PP
See also the framecrc muxer.
.SS "framecrc"
.IX Subsection "framecrc"
Per-frame \s-1CRC \s0(Cyclic Redundancy Check) testing format.
.PP
This muxer computes and prints the Adler\-32 \s-1CRC\s0 for each decoded audio
and video frame. By default audio frames are converted to signed
16\-bit raw audio and video frames to raw video before computing the
\&\s-1CRC.\s0
.PP
The output of the muxer consists of a line for each audio and video
frame of the form: \fIstream_index\fR, \fIframe_dts\fR,
\&\fIframe_size\fR, 0x\fI\s-1CRC\s0\fR, where \fI\s-1CRC\s0\fR is a hexadecimal
number 0\-padded to 8 digits containing the \s-1CRC\s0 of the decoded frame.
.PP
For example to compute the \s-1CRC\s0 of each decoded frame in the input, and
store it in the file \fIout.crc\fR:
.PP
.Vb 1
\&        avconv \-i INPUT \-f framecrc out.crc
.Ve
.PP
You can print the \s-1CRC\s0 of each decoded frame to stdout with the command:
.PP
.Vb 1
\&        avconv \-i INPUT \-f framecrc \-
.Ve
.PP
You can select the output format of each frame with \fBavconv\fR by
specifying the audio and video codec and format. For example, to
compute the \s-1CRC\s0 of each decoded input audio frame converted to \s-1PCM\s0
unsigned 8\-bit and of each decoded input video frame converted to
\&\s-1MPEG\-2\s0 video, use the command:
.PP
.Vb 1
\&        avconv \-i INPUT \-c:a pcm_u8 \-c:v mpeg2video \-f framecrc \-
.Ve
.PP
See also the crc muxer.
.SS "hls"
.IX Subsection "hls"
Apple \s-1HTTP\s0 Live Streaming muxer that segments MPEG-TS according to
the \s-1HTTP\s0 Live Streaming specification.
.PP
It creates a playlist file and numbered segment files. The output
filename specifies the playlist filename; the segment filenames
receive the same basename as the playlist, a sequential number and
a .ts extension.
.PP
.Vb 1
\&        avconv \-i in.nut out.m3u8
.Ve
.IP "\fB\-hls_time\fR \fIseconds\fR" 4
.IX Item "-hls_time seconds"
Set the segment length in seconds.
.IP "\fB\-hls_list_size\fR \fIsize\fR" 4
.IX Item "-hls_list_size size"
Set the maximum number of playlist entries.
.IP "\fB\-hls_wrap\fR \fIwrap\fR" 4
.IX Item "-hls_wrap wrap"
Set the number after which index wraps.
.IP "\fB\-start_number\fR \fInumber\fR" 4
.IX Item "-start_number number"
Start the sequence from \fInumber\fR.
.IP "\fB\-hls_base_url\fR \fIbaseurl\fR" 4
.IX Item "-hls_base_url baseurl"
Append \fIbaseurl\fR to every entry in the playlist.
Useful to generate playlists with absolute paths.
.SS "image2"
.IX Subsection "image2"
Image file muxer.
.PP
The image file muxer writes video frames to image files.
.PP
The output filenames are specified by a pattern, which can be used to
produce sequentially numbered series of files.
The pattern may contain the string \*(L"%d\*(R" or "%0\fIN\fRd\*(L", this string
specifies the position of the characters representing a numbering in
the filenames. If the form \*(R"%0\fIN\fRd" is used, the string
representing the number in each filename is 0\-padded to \fIN\fR
digits. The literal character '%' can be specified in the pattern with
the string \*(L"%%\*(R".
.PP
If the pattern contains \*(L"%d\*(R" or "%0\fIN\fRd", the first filename of
the file list specified will contain the number 1, all the following
numbers will be sequential.
.PP
The pattern may contain a suffix which is used to automatically
determine the format of the image files to write.
.PP
For example the pattern \*(L"img\-%03d.bmp\*(R" will specify a sequence of
filenames of the form \fIimg\-001.bmp\fR, \fIimg\-002.bmp\fR, ...,
\&\fIimg\-010.bmp\fR, etc.
The pattern \*(L"img%%\-%d.jpg\*(R" will specify a sequence of filenames of the
form \fIimg%\-1.jpg\fR, \fIimg%\-2.jpg\fR, ..., \fIimg%\-10.jpg\fR,
etc.
.PP
The following example shows how to use \fBavconv\fR for creating a
sequence of files \fIimg\-001.jpeg\fR, \fIimg\-002.jpeg\fR, ...,
taking one image every second from the input video:
.PP
.Vb 1
\&        avconv \-i in.avi \-vsync 1 \-r 1 \-f image2 \*(Aqimg\-%03d.jpeg\*(Aq
.Ve
.PP
Note that with \fBavconv\fR, if the format is not specified with the
\&\f(CW\*(C`\-f\*(C'\fR option and the output filename specifies an image file
format, the image2 muxer is automatically selected, so the previous
command can be written as:
.PP
.Vb 1
\&        avconv \-i in.avi \-vsync 1 \-r 1 \*(Aqimg\-%03d.jpeg\*(Aq
.Ve
.PP
Note also that the pattern must not necessarily contain \*(L"%d\*(R" or
"%0\fIN\fRd", for example to create a single image file
\&\fIimg.jpeg\fR from the input video you can employ the command:
.PP
.Vb 1
\&        avconv \-i in.avi \-f image2 \-frames:v 1 img.jpeg
.Ve
.IP "\fB\-start_number\fR \fInumber\fR" 4
.IX Item "-start_number number"
Start the sequence from \fInumber\fR.
.IP "\fB\-update\fR \fInumber\fR" 4
.IX Item "-update number"
If \fInumber\fR is nonzero, the filename will always be interpreted as just a
filename, not a pattern, and this file will be continuously overwritten with new
images.
.SS "matroska"
.IX Subsection "matroska"
Matroska container muxer.
.PP
This muxer implements the matroska and webm container specs.
.PP
The recognized metadata settings in this muxer are:
.IP "\fBtitle=\fR\fItitle name\fR" 4
.IX Item "title=title name"
Name provided to a single track
.IP "\fBlanguage=\fR\fIlanguage name\fR" 4
.IX Item "language=language name"
Specifies the language of the track in the Matroska languages form
.IP "\fBSTEREO_MODE=\fR\fImode\fR" 4
.IX Item "STEREO_MODE=mode"
Stereo 3D video layout of two views in a single video track
.RS 4
.IP "\fBmono\fR" 4
.IX Item "mono"
video is not stereo
.IP "\fBleft_right\fR" 4
.IX Item "left_right"
Both views are arranged side by side, Left-eye view is on the left
.IP "\fBbottom_top\fR" 4
.IX Item "bottom_top"
Both views are arranged in top-bottom orientation, Left-eye view is at bottom
.IP "\fBtop_bottom\fR" 4
.IX Item "top_bottom"
Both views are arranged in top-bottom orientation, Left-eye view is on top
.IP "\fBcheckerboard_rl\fR" 4
.IX Item "checkerboard_rl"
Each view is arranged in a checkerboard interleaved pattern, Left-eye view being first
.IP "\fBcheckerboard_lr\fR" 4
.IX Item "checkerboard_lr"
Each view is arranged in a checkerboard interleaved pattern, Right-eye view being first
.IP "\fBrow_interleaved_rl\fR" 4
.IX Item "row_interleaved_rl"
Each view is constituted by a row based interleaving, Right-eye view is first row
.IP "\fBrow_interleaved_lr\fR" 4
.IX Item "row_interleaved_lr"
Each view is constituted by a row based interleaving, Left-eye view is first row
.IP "\fBcol_interleaved_rl\fR" 4
.IX Item "col_interleaved_rl"
Both views are arranged in a column based interleaving manner, Right-eye view is first column
.IP "\fBcol_interleaved_lr\fR" 4
.IX Item "col_interleaved_lr"
Both views are arranged in a column based interleaving manner, Left-eye view is first column
.IP "\fBanaglyph_cyan_red\fR" 4
.IX Item "anaglyph_cyan_red"
All frames are in anaglyph format viewable through red-cyan filters
.IP "\fBright_left\fR" 4
.IX Item "right_left"
Both views are arranged side by side, Right-eye view is on the left
.IP "\fBanaglyph_green_magenta\fR" 4
.IX Item "anaglyph_green_magenta"
All frames are in anaglyph format viewable through green-magenta filters
.IP "\fBblock_lr\fR" 4
.IX Item "block_lr"
Both eyes laced in one Block, Left-eye view is first
.IP "\fBblock_rl\fR" 4
.IX Item "block_rl"
Both eyes laced in one Block, Right-eye view is first
.RE
.RS 4
.RE
.PP
For example a 3D WebM clip can be created using the following command line:
.PP
.Vb 1
\&        avconv \-i sample_left_right_clip.mpg \-an \-c:v libvpx \-metadata STEREO_MODE=left_right \-y stereo_clip.webm
.Ve
.PP
This muxer supports the following options:
.IP "\fBreserve_index_space\fR" 4
.IX Item "reserve_index_space"
By default, this muxer writes the index for seeking (called cues in Matroska
terms) at the end of the file, because it cannot know in advance how much space
to leave for the index at the beginning of the file. However for some use cases
\&\*(-- e.g.  streaming where seeking is possible but slow \*(-- it is useful to put the
index at the beginning of the file.
.Sp
If this option is set to a non-zero value, the muxer will reserve a given amount
of space in the file header and then try to write the cues there when the muxing
finishes. If the available space does not suffice, muxing will fail. A safe size
for most use cases should be about 50kB per hour of video.
.Sp
Note that cues are only written if the output is seekable and this option will
have no effect if it is not.
.SS "mov, mp4, ismv"
.IX Subsection "mov, mp4, ismv"
The mov/mp4/ismv muxer supports fragmentation. Normally, a \s-1MOV/MP4\s0
file has all the metadata about all packets stored in one location
(written at the end of the file, it can be moved to the start for
better playback using the \fBqt-faststart\fR tool). A fragmented
file consists of a number of fragments, where packets and metadata
about these packets are stored together. Writing a fragmented
file has the advantage that the file is decodable even if the
writing is interrupted (while a normal \s-1MOV/MP4\s0 is undecodable if
it is not properly finished), and it requires less memory when writing
very long files (since writing normal \s-1MOV/MP4\s0 files stores info about
every single packet in memory until the file is closed). The downside
is that it is less compatible with other applications.
.PP
Fragmentation is enabled by setting one of the AVOptions that define
how to cut the file into fragments:
.IP "\fB\-movflags frag_keyframe\fR" 4
.IX Item "-movflags frag_keyframe"
Start a new fragment at each video keyframe.
.IP "\fB\-frag_duration\fR \fIduration\fR" 4
.IX Item "-frag_duration duration"
Create fragments that are \fIduration\fR microseconds long.
.IP "\fB\-frag_size\fR \fIsize\fR" 4
.IX Item "-frag_size size"
Create fragments that contain up to \fIsize\fR bytes of payload data.
.IP "\fB\-movflags frag_custom\fR" 4
.IX Item "-movflags frag_custom"
Allow the caller to manually choose when to cut fragments, by
calling \f(CW\*(C`av_write_frame(ctx, NULL)\*(C'\fR to write a fragment with
the packets written so far. (This is only useful with other
applications integrating libavformat, not from \fBavconv\fR.)
.IP "\fB\-min_frag_duration\fR \fIduration\fR" 4
.IX Item "-min_frag_duration duration"
Don't create fragments that are shorter than \fIduration\fR microseconds long.
.PP
If more than one condition is specified, fragments are cut when
one of the specified conditions is fulfilled. The exception to this is
\&\f(CW\*(C`\-min_frag_duration\*(C'\fR, which has to be fulfilled for any of the other
conditions to apply.
.PP
Additionally, the way the output file is written can be adjusted
through a few other options:
.IP "\fB\-movflags empty_moov\fR" 4
.IX Item "-movflags empty_moov"
Write an initial moov atom directly at the start of the file, without
describing any samples in it. Generally, an mdat/moov pair is written
at the start of the file, as a normal \s-1MOV/MP4\s0 file, containing only
a short portion of the file. With this option set, there is no initial
mdat atom, and the moov atom only describes the tracks but has
a zero duration.
.Sp
Files written with this option set do not work in QuickTime.
This option is implicitly set when writing ismv (Smooth Streaming) files.
.IP "\fB\-movflags separate_moof\fR" 4
.IX Item "-movflags separate_moof"
Write a separate moof (movie fragment) atom for each track. Normally,
packets for all tracks are written in a moof atom (which is slightly
more efficient), but with this option set, the muxer writes one moof/mdat
pair for each track, making it easier to separate tracks.
.Sp
This option is implicitly set when writing ismv (Smooth Streaming) files.
.IP "\fB\-movflags faststart\fR" 4
.IX Item "-movflags faststart"
Run a second pass moving the index (moov atom) to the beginning of the file.
This operation can take a while, and will not work in various situations such
as fragmented output, thus it is not enabled by default.
.IP "\fB\-movflags disable_chpl\fR" 4
.IX Item "-movflags disable_chpl"
Disable Nero chapter markers (chpl atom).  Normally, both Nero chapters
and a QuickTime chapter track are written to the file. With this option
set, only the QuickTime chapter track will be written. Nero chapters can
cause failures when the file is reprocessed with certain tagging programs.
.PP
Smooth Streaming content can be pushed in real time to a publishing
point on \s-1IIS\s0 with this muxer. Example:
.PP
.Vb 1
\&        avconv \-re <<normal input/transcoding options>> \-movflags isml+frag_keyframe \-f ismv http://server/publishingpoint.isml/Streams(Encoder1)
.Ve
.SS "mp3"
.IX Subsection "mp3"
The \s-1MP3\s0 muxer writes a raw \s-1MP3\s0 stream with an ID3v2 header at the beginning and
optionally an ID3v1 tag at the end. ID3v2.3 and ID3v2.4 are supported, the
\&\f(CW\*(C`id3v2_version\*(C'\fR option controls which one is used. Setting
\&\f(CW\*(C`id3v2_version\*(C'\fR to 0 will disable the ID3v2 header completely. The legacy
ID3v1 tag is not written by default, but may be enabled with the
\&\f(CW\*(C`write_id3v1\*(C'\fR option.
.PP
The muxer may also write a Xing frame at the beginning, which contains the
number of frames in the file. It is useful for computing duration of \s-1VBR\s0 files.
The Xing frame is written if the output stream is seekable and if the
\&\f(CW\*(C`write_xing\*(C'\fR option is set to 1 (the default).
.PP
The muxer supports writing ID3v2 attached pictures (\s-1APIC\s0 frames). The pictures
are supplied to the muxer in form of a video stream with a single packet. There
can be any number of those streams, each will correspond to a single \s-1APIC\s0 frame.
The stream metadata tags \fItitle\fR and \fIcomment\fR map to \s-1APIC
\&\s0\fIdescription\fR and \fIpicture type\fR respectively. See
<\fBhttp://id3.org/id3v2.4.0\-frames\fR> for allowed picture types.
.PP
Note that the \s-1APIC\s0 frames must be written at the beginning, so the muxer will
buffer the audio frames until it gets all the pictures. It is therefore advised
to provide the pictures as soon as possible to avoid excessive buffering.
.PP
Examples:
.PP
Write an mp3 with an ID3v2.3 header and an ID3v1 footer:
.PP
.Vb 1
\&        avconv \-i INPUT \-id3v2_version 3 \-write_id3v1 1 out.mp3
.Ve
.PP
Attach a picture to an mp3:
.PP
.Vb 2
\&        avconv \-i input.mp3 \-i cover.png \-c copy \-metadata:s:v title="Album cover"
\&        \-metadata:s:v comment="Cover (Front)" out.mp3
.Ve
.PP
Write a \*(L"clean\*(R" \s-1MP3\s0 without any extra features:
.PP
.Vb 1
\&        avconv \-i input.wav \-write_xing 0 \-id3v2_version 0 out.mp3
.Ve
.SS "mpegts"
.IX Subsection "mpegts"
\&\s-1MPEG\s0 transport stream muxer.
.PP
This muxer implements \s-1ISO 13818\-1\s0 and part of \s-1ETSI EN 300 468.\s0
.PP
The muxer options are:
.IP "\fB\-mpegts_original_network_id\fR \fInumber\fR" 4
.IX Item "-mpegts_original_network_id number"
Set the original_network_id (default 0x0001). This is unique identifier
of a network in \s-1DVB.\s0 Its main use is in the unique identification of a
service through the path Original_Network_ID, Transport_Stream_ID.
.IP "\fB\-mpegts_transport_stream_id\fR \fInumber\fR" 4
.IX Item "-mpegts_transport_stream_id number"
Set the transport_stream_id (default 0x0001). This identifies a
transponder in \s-1DVB.\s0
.IP "\fB\-mpegts_service_id\fR \fInumber\fR" 4
.IX Item "-mpegts_service_id number"
Set the service_id (default 0x0001) also known as program in \s-1DVB.\s0
.IP "\fB\-mpegts_pmt_start_pid\fR \fInumber\fR" 4
.IX Item "-mpegts_pmt_start_pid number"
Set the first \s-1PID\s0 for \s-1PMT \s0(default 0x1000, max 0x1f00).
.IP "\fB\-mpegts_start_pid\fR \fInumber\fR" 4
.IX Item "-mpegts_start_pid number"
Set the first \s-1PID\s0 for data packets (default 0x0100, max 0x0f00).
.IP "\fB\-muxrate\fR \fInumber\fR" 4
.IX Item "-muxrate number"
Set a constant muxrate (default \s-1VBR\s0).
.IP "\fB\-pcr_period\fR \fInumer\fR" 4
.IX Item "-pcr_period numer"
Override the default \s-1PCR\s0 retransmission time (default 20ms), ignored
if variable muxrate is selected.
.PP
The recognized metadata settings in mpegts muxer are \f(CW\*(C`service_provider\*(C'\fR
and \f(CW\*(C`service_name\*(C'\fR. If they are not set the default for
\&\f(CW\*(C`service_provider\*(C'\fR is \*(L"Libav\*(R" and the default for
\&\f(CW\*(C`service_name\*(C'\fR is \*(L"Service01\*(R".
.PP
.Vb 9
\&        avconv \-i file.mpg \-c copy \e
\&             \-mpegts_original_network_id 0x1122 \e
\&             \-mpegts_transport_stream_id 0x3344 \e
\&             \-mpegts_service_id 0x5566 \e
\&             \-mpegts_pmt_start_pid 0x1500 \e
\&             \-mpegts_start_pid 0x150 \e
\&             \-metadata service_provider="Some provider" \e
\&             \-metadata service_name="Some Channel" \e
\&             \-y out.ts
.Ve
.SS "null"
.IX Subsection "null"
Null muxer.
.PP
This muxer does not generate any output file, it is mainly useful for
testing or benchmarking purposes.
.PP
For example to benchmark decoding with \fBavconv\fR you can use the
command:
.PP
.Vb 1
\&        avconv \-benchmark \-i INPUT \-f null out.null
.Ve
.PP
Note that the above command does not read or write the \fIout.null\fR
file, but specifying the output file is required by the \fBavconv\fR
syntax.
.PP
Alternatively you can write the command as:
.PP
.Vb 1
\&        avconv \-benchmark \-i INPUT \-f null \-
.Ve
.SS "nut"
.IX Subsection "nut"
.IP "\fB\-syncpoints\fR \fIflags\fR" 4
.IX Item "-syncpoints flags"
Change the syncpoint usage in nut:
.RS 4
.IP "\fIdefault\fR \fBuse the normal low-overhead seeking aids.\fR" 4
.IX Item "default use the normal low-overhead seeking aids."
.PD 0
.IP "\fInone\fR \fBdo not use the syncpoints at all, reducing the overhead but making the stream non-seekable;\fR" 4
.IX Item "none do not use the syncpoints at all, reducing the overhead but making the stream non-seekable;"
.IP "\fItimestamped\fR \fBextend the syncpoint with a wallclock field.\fR" 4
.IX Item "timestamped extend the syncpoint with a wallclock field."
.RE
.RS 4
.PD
.Sp
The \fInone\fR and \fItimestamped\fR flags are experimental.
.RE
.PP
.Vb 1
\&        avconv \-i INPUT \-f_strict experimental \-syncpoints none \- | processor
.Ve
.SS "ogg"
.IX Subsection "ogg"
Ogg container muxer.
.IP "\fB\-page_duration\fR \fIduration\fR" 4
.IX Item "-page_duration duration"
Preferred page duration, in microseconds. The muxer will attempt to create
pages that are approximately \fIduration\fR microseconds long. This allows the
user to compromise between seek granularity and container overhead. The default
is 1 second. A value of 0 will fill all segments, making pages as large as
possible. A value of 1 will effectively use 1 packet-per-page in most
situations, giving a small seek granularity at the cost of additional container
overhead.
.SS "segment"
.IX Subsection "segment"
Basic stream segmenter.
.PP
The segmenter muxer outputs streams to a number of separate files of nearly
fixed duration. Output filename pattern can be set in a fashion similar to
image2.
.PP
Every segment starts with a video keyframe, if a video stream is present.
The segment muxer works best with a single constant frame rate video.
.PP
Optionally it can generate a flat list of the created segments, one segment
per line.
.IP "\fBsegment_format\fR \fIformat\fR" 4
.IX Item "segment_format format"
Override the inner container format, by default it is guessed by the filename
extension.
.IP "\fBsegment_time\fR \fIt\fR" 4
.IX Item "segment_time t"
Set segment duration to \fIt\fR seconds.
.IP "\fBsegment_list\fR \fIname\fR" 4
.IX Item "segment_list name"
Generate also a listfile named \fIname\fR.
.IP "\fBsegment_list_type\fR \fItype\fR" 4
.IX Item "segment_list_type type"
Select the listing format.
.RS 4
.IP "\fIflat\fR \fBuse a simple flat list of entries.\fR" 4
.IX Item "flat use a simple flat list of entries."
.PD 0
.IP "\fIhls\fR \fBuse a m3u8\-like structure.\fR" 4
.IX Item "hls use a m3u8-like structure."
.RE
.RS 4
.RE
.IP "\fBsegment_list_size\fR \fIsize\fR" 4
.IX Item "segment_list_size size"
.PD
Overwrite the listfile once it reaches \fIsize\fR entries.
.IP "\fBsegment_list_entry_prefix\fR \fIprefix\fR" 4
.IX Item "segment_list_entry_prefix prefix"
Prepend \fIprefix\fR to each entry. Useful to generate absolute paths.
.IP "\fBsegment_wrap\fR \fIlimit\fR" 4
.IX Item "segment_wrap limit"
Wrap around segment index once it reaches \fIlimit\fR.
.PP
.Vb 1
\&        avconv \-i in.mkv \-c copy \-map 0 \-f segment \-list out.list out%03d.nut
.Ve
.PP
Protocols are configured elements in Libav which allow to access
resources which require the use of a particular protocol.
.PP
When you configure your Libav build, all the supported protocols are
enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-protocols\*(R".
.PP
You can disable all the protocols using the configure option
\&\*(L"\-\-disable\-protocols\*(R", and selectively enable a protocol using the
option "\-\-enable\-protocol=\fI\s-1PROTOCOL\s0\fR\*(L", or you can disable a
particular protocol using the option
\&\*(R"\-\-disable\-protocol=\fI\s-1PROTOCOL\s0\fR".
.PP
The option \*(L"\-protocols\*(R" of the av* tools will display the list of
supported protocols.
.PP
A description of the currently available protocols follows.
.SS "concat"
.IX Subsection "concat"
Physical concatenation protocol.
.PP
Allow to read and seek from many resource in sequence as if they were
a unique resource.
.PP
A \s-1URL\s0 accepted by this protocol has the syntax:
.PP
.Vb 1
\&        concat:<URL1>|<URL2>|...|<URLN>
.Ve
.PP
where \fI\s-1URL1\s0\fR, \fI\s-1URL2\s0\fR, ..., \fI\s-1URLN\s0\fR are the urls of the
resource to be concatenated, each one possibly specifying a distinct
protocol.
.PP
For example to read a sequence of files \fIsplit1.mpeg\fR,
\&\fIsplit2.mpeg\fR, \fIsplit3.mpeg\fR with \fBavplay\fR use the
command:
.PP
.Vb 1
\&        avplay concat:split1.mpeg\e|split2.mpeg\e|split3.mpeg
.Ve
.PP
Note that you may need to escape the character \*(L"|\*(R" which is special for
many shells.
.SS "file"
.IX Subsection "file"
File access protocol.
.PP
Allow to read from or read to a file.
.PP
For example to read from a file \fIinput.mpeg\fR with \fBavconv\fR
use the command:
.PP
.Vb 1
\&        avconv \-i file:input.mpeg output.mpeg
.Ve
.PP
The av* tools default to the file protocol, that is a resource
specified with the name \*(L"\s-1FILE\s0.mpeg\*(R" is interpreted as the \s-1URL
\&\s0\*(L"file:FILE.mpeg\*(R".
.SS "gopher"
.IX Subsection "gopher"
Gopher protocol.
.SS "hls"
.IX Subsection "hls"
Read Apple \s-1HTTP\s0 Live Streaming compliant segmented stream as
a uniform one. The M3U8 playlists describing the segments can be
remote \s-1HTTP\s0 resources or local files, accessed using the standard
file protocol.
The nested protocol is declared by specifying
"+\fIproto\fR" after the hls \s-1URI\s0 scheme name, where \fIproto\fR
is either \*(L"file\*(R" or \*(L"http\*(R".
.PP
.Vb 2
\&        hls+http://host/path/to/remote/resource.m3u8
\&        hls+file://path/to/local/resource.m3u8
.Ve
.PP
Using this protocol is discouraged \- the hls demuxer should work
just as well (if not, please report the issues) and is more complete.
To use the hls demuxer instead, simply use the direct URLs to the
m3u8 files.
.SS "http"
.IX Subsection "http"
\&\s-1HTTP \s0(Hyper Text Transfer Protocol).
.PP
This protocol accepts the following options:
.IP "\fBchunked_post\fR" 4
.IX Item "chunked_post"
If set to 1 use chunked Transfer-Encoding for posts, default is 1.
.IP "\fBcontent_type\fR" 4
.IX Item "content_type"
Set a specific content type for the \s-1POST\s0 messages.
.IP "\fBheaders\fR" 4
.IX Item "headers"
Set custom \s-1HTTP\s0 headers, can override built in default headers. The
value must be a string encoding the headers.
.IP "\fBmultiple_requests\fR" 4
.IX Item "multiple_requests"
Use persistent connections if set to 1, default is 0.
.IP "\fBpost_data\fR" 4
.IX Item "post_data"
Set custom \s-1HTTP\s0 post data.
.IP "\fBuser_agent\fR" 4
.IX Item "user_agent"
Override the User-Agent header. If not specified a string of the form
\&\*(L"Lavf/<version>\*(R" will be used.
.IP "\fBmime_type\fR" 4
.IX Item "mime_type"
Export the \s-1MIME\s0 type.
.IP "\fBicy\fR" 4
.IX Item "icy"
If set to 1 request \s-1ICY \s0(SHOUTcast) metadata from the server. If the server
supports this, the metadata has to be retrieved by the application by reading
the \fBicy_metadata_headers\fR and \fBicy_metadata_packet\fR options.
The default is 1.
.IP "\fBicy_metadata_headers\fR" 4
.IX Item "icy_metadata_headers"
If the server supports \s-1ICY\s0 metadata, this contains the ICY-specific \s-1HTTP\s0 reply
headers, separated by newline characters.
.IP "\fBicy_metadata_packet\fR" 4
.IX Item "icy_metadata_packet"
If the server supports \s-1ICY\s0 metadata, and \fBicy\fR was set to 1, this
contains the last non-empty metadata packet sent by the server. It should be
polled in regular intervals by applications interested in mid-stream metadata
updates.
.IP "\fBoffset\fR" 4
.IX Item "offset"
Set initial byte offset.
.IP "\fBend_offset\fR" 4
.IX Item "end_offset"
Try to limit the request to bytes preceding this offset.
.SS "Icecast"
.IX Subsection "Icecast"
Icecast (stream to Icecast servers)
.PP
This protocol accepts the following options:
.IP "\fBice_genre\fR" 4
.IX Item "ice_genre"
Set the stream genre.
.IP "\fBice_name\fR" 4
.IX Item "ice_name"
Set the stream name.
.IP "\fBice_description\fR" 4
.IX Item "ice_description"
Set the stream description.
.IP "\fBice_url\fR" 4
.IX Item "ice_url"
Set the stream website \s-1URL.\s0
.IP "\fBice_public\fR" 4
.IX Item "ice_public"
Set if the stream should be public or not.
The default is 0 (not public).
.IP "\fBuser_agent\fR" 4
.IX Item "user_agent"
Override the User-Agent header. If not specified a string of the form
\&\*(L"Lavf/<version>\*(R" will be used.
.IP "\fBpassword\fR" 4
.IX Item "password"
Set the Icecast mountpoint password.
.IP "\fBcontent_type\fR" 4
.IX Item "content_type"
Set the stream content type. This must be set if it is different from
audio/mpeg.
.IP "\fBlegacy_icecast\fR" 4
.IX Item "legacy_icecast"
This enables support for Icecast versions < 2.4.0, that do not support the
\&\s-1HTTP PUT\s0 method but the \s-1SOURCE\s0 method.
.SS "mmst"
.IX Subsection "mmst"
\&\s-1MMS \s0(Microsoft Media Server) protocol over \s-1TCP.\s0
.SS "mmsh"
.IX Subsection "mmsh"
\&\s-1MMS \s0(Microsoft Media Server) protocol over \s-1HTTP.\s0
.PP
The required syntax is:
.PP
.Vb 1
\&        mmsh://<server>[:<port>][/<app>][/<playpath>]
.Ve
.SS "md5"
.IX Subsection "md5"
\&\s-1MD5\s0 output protocol.
.PP
Computes the \s-1MD5\s0 hash of the data to be written, and on close writes
this to the designated output or stdout if none is specified. It can
be used to test muxers without writing an actual file.
.PP
Some examples follow.
.PP
.Vb 2
\&        # Write the MD5 hash of the encoded AVI file to the file output.avi.md5.
\&        avconv \-i input.flv \-f avi \-y md5:output.avi.md5
\&        
\&        # Write the MD5 hash of the encoded AVI file to stdout.
\&        avconv \-i input.flv \-f avi \-y md5:
.Ve
.PP
Note that some formats (typically \s-1MOV\s0) require the output protocol to
be seekable, so they will fail with the \s-1MD5\s0 output protocol.
.SS "pipe"
.IX Subsection "pipe"
\&\s-1UNIX\s0 pipe access protocol.
.PP
Allow to read and write from \s-1UNIX\s0 pipes.
.PP
The accepted syntax is:
.PP
.Vb 1
\&        pipe:[<number>]
.Ve
.PP
\&\fInumber\fR is the number corresponding to the file descriptor of the
pipe (e.g. 0 for stdin, 1 for stdout, 2 for stderr).  If \fInumber\fR
is not specified, by default the stdout file descriptor will be used
for writing, stdin for reading.
.PP
For example to read from stdin with \fBavconv\fR:
.PP
.Vb 3
\&        cat test.wav | avconv \-i pipe:0
\&        # ...this is the same as...
\&        cat test.wav | avconv \-i pipe:
.Ve
.PP
For writing to stdout with \fBavconv\fR:
.PP
.Vb 3
\&        avconv \-i test.wav \-f avi pipe:1 | cat > test.avi
\&        # ...this is the same as...
\&        avconv \-i test.wav \-f avi pipe: | cat > test.avi
.Ve
.PP
Note that some formats (typically \s-1MOV\s0), require the output protocol to
be seekable, so they will fail with the pipe output protocol.
.SS "rtmp"
.IX Subsection "rtmp"
Real-Time Messaging Protocol.
.PP
The Real-Time Messaging Protocol (\s-1RTMP\s0) is used for streaming multimedia
content across a \s-1TCP/IP\s0 network.
.PP
The required syntax is:
.PP
.Vb 1
\&        rtmp://[<username>:<password>@]<server>[:<port>][/<app>][/<instance>][/<playpath>]
.Ve
.PP
The accepted parameters are:
.IP "\fBusername\fR" 4
.IX Item "username"
An optional username (mostly for publishing).
.IP "\fBpassword\fR" 4
.IX Item "password"
An optional password (mostly for publishing).
.IP "\fBserver\fR" 4
.IX Item "server"
The address of the \s-1RTMP\s0 server.
.IP "\fBport\fR" 4
.IX Item "port"
The number of the \s-1TCP\s0 port to use (by default is 1935).
.IP "\fBapp\fR" 4
.IX Item "app"
It is the name of the application to access. It usually corresponds to
the path where the application is installed on the \s-1RTMP\s0 server
(e.g. \fI/ondemand/\fR, \fI/flash/live/\fR, etc.). You can override
the value parsed from the \s-1URI\s0 through the \f(CW\*(C`rtmp_app\*(C'\fR option, too.
.IP "\fBplaypath\fR" 4
.IX Item "playpath"
It is the path or name of the resource to play with reference to the
application specified in \fIapp\fR, may be prefixed by \*(L"mp4:\*(R". You
can override the value parsed from the \s-1URI\s0 through the \f(CW\*(C`rtmp_playpath\*(C'\fR
option, too.
.IP "\fBlisten\fR" 4
.IX Item "listen"
Act as a server, listening for an incoming connection.
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
Maximum time to wait for the incoming connection. Implies listen.
.PP
Additionally, the following parameters can be set via command line options
(or in code via \f(CW\*(C`AVOption\*(C'\fRs):
.IP "\fBrtmp_app\fR" 4
.IX Item "rtmp_app"
Name of application to connect on the \s-1RTMP\s0 server. This option
overrides the parameter specified in the \s-1URI.\s0
.IP "\fBrtmp_buffer\fR" 4
.IX Item "rtmp_buffer"
Set the client buffer time in milliseconds. The default is 3000.
.IP "\fBrtmp_conn\fR" 4
.IX Item "rtmp_conn"
Extra arbitrary \s-1AMF\s0 connection parameters, parsed from a string,
e.g. like \f(CW\*(C`B:1 S:authMe O:1 NN:code:1.23 NS:flag:ok O:0\*(C'\fR.
Each value is prefixed by a single character denoting the type,
B for Boolean, N for number, S for string, O for object, or Z for null,
followed by a colon. For Booleans the data must be either 0 or 1 for
\&\s-1FALSE\s0 or \s-1TRUE,\s0 respectively.  Likewise for Objects the data must be 0 or
1 to end or begin an object, respectively. Data items in subobjects may
be named, by prefixing the type with 'N' and specifying the name before
the value (i.e. \f(CW\*(C`NB:myFlag:1\*(C'\fR). This option may be used multiple
times to construct arbitrary \s-1AMF\s0 sequences.
.IP "\fBrtmp_flashver\fR" 4
.IX Item "rtmp_flashver"
Version of the Flash plugin used to run the \s-1SWF\s0 player. The default
is \s-1LNX 9,0,124,2. \s0(When publishing, the default is \s-1FMLE/3.0 \s0(compatible;
<libavformat version>).)
.IP "\fBrtmp_flush_interval\fR" 4
.IX Item "rtmp_flush_interval"
Number of packets flushed in the same request (\s-1RTMPT\s0 only). The default
is 10.
.IP "\fBrtmp_live\fR" 4
.IX Item "rtmp_live"
Specify that the media is a live stream. No resuming or seeking in
live streams is possible. The default value is \f(CW\*(C`any\*(C'\fR, which means the
subscriber first tries to play the live stream specified in the
playpath. If a live stream of that name is not found, it plays the
recorded stream. The other possible values are \f(CW\*(C`live\*(C'\fR and
\&\f(CW\*(C`recorded\*(C'\fR.
.IP "\fBrtmp_pageurl\fR" 4
.IX Item "rtmp_pageurl"
\&\s-1URL\s0 of the web page in which the media was embedded. By default no
value will be sent.
.IP "\fBrtmp_playpath\fR" 4
.IX Item "rtmp_playpath"
Stream identifier to play or to publish. This option overrides the
parameter specified in the \s-1URI.\s0
.IP "\fBrtmp_subscribe\fR" 4
.IX Item "rtmp_subscribe"
Name of live stream to subscribe to. By default no value will be sent.
It is only sent if the option is specified or if rtmp_live
is set to live.
.IP "\fBrtmp_swfhash\fR" 4
.IX Item "rtmp_swfhash"
\&\s-1SHA256\s0 hash of the decompressed \s-1SWF\s0 file (32 bytes).
.IP "\fBrtmp_swfsize\fR" 4
.IX Item "rtmp_swfsize"
Size of the decompressed \s-1SWF\s0 file, required for SWFVerification.
.IP "\fBrtmp_swfurl\fR" 4
.IX Item "rtmp_swfurl"
\&\s-1URL\s0 of the \s-1SWF\s0 player for the media. By default no value will be sent.
.IP "\fBrtmp_swfverify\fR" 4
.IX Item "rtmp_swfverify"
\&\s-1URL\s0 to player swf file, compute hash/size automatically.
.IP "\fBrtmp_tcurl\fR" 4
.IX Item "rtmp_tcurl"
\&\s-1URL\s0 of the target stream. Defaults to proto://host[:port]/app.
.PP
For example to read with \fBavplay\fR a multimedia resource named
\&\*(L"sample\*(R" from the application \*(L"vod\*(R" from an \s-1RTMP\s0 server \*(L"myserver\*(R":
.PP
.Vb 1
\&        avplay rtmp://myserver/vod/sample
.Ve
.PP
To publish to a password protected server, passing the playpath and
app names separately:
.PP
.Vb 1
\&        avconv \-re \-i <input> \-f flv \-rtmp_playpath some/long/path \-rtmp_app long/app/name rtmp://username:password@myserver/
.Ve
.SS "rtmpe"
.IX Subsection "rtmpe"
Encrypted Real-Time Messaging Protocol.
.PP
The Encrypted Real-Time Messaging Protocol (\s-1RTMPE\s0) is used for
streaming multimedia content within standard cryptographic primitives,
consisting of Diffie-Hellman key exchange and \s-1HMACSHA256,\s0 generating
a pair of \s-1RC4\s0 keys.
.SS "rtmps"
.IX Subsection "rtmps"
Real-Time Messaging Protocol over a secure \s-1SSL\s0 connection.
.PP
The Real-Time Messaging Protocol (\s-1RTMPS\s0) is used for streaming
multimedia content across an encrypted connection.
.SS "rtmpt"
.IX Subsection "rtmpt"
Real-Time Messaging Protocol tunneled through \s-1HTTP.\s0
.PP
The Real-Time Messaging Protocol tunneled through \s-1HTTP \s0(\s-1RTMPT\s0) is used
for streaming multimedia content within \s-1HTTP\s0 requests to traverse
firewalls.
.SS "rtmpte"
.IX Subsection "rtmpte"
Encrypted Real-Time Messaging Protocol tunneled through \s-1HTTP.\s0
.PP
The Encrypted Real-Time Messaging Protocol tunneled through \s-1HTTP \s0(\s-1RTMPTE\s0)
is used for streaming multimedia content within \s-1HTTP\s0 requests to traverse
firewalls.
.SS "rtmpts"
.IX Subsection "rtmpts"
Real-Time Messaging Protocol tunneled through \s-1HTTPS.\s0
.PP
The Real-Time Messaging Protocol tunneled through \s-1HTTPS \s0(\s-1RTMPTS\s0) is used
for streaming multimedia content within \s-1HTTPS\s0 requests to traverse
firewalls.
.SS "librtmp rtmp, rtmpe, rtmps, rtmpt, rtmpte"
.IX Subsection "librtmp rtmp, rtmpe, rtmps, rtmpt, rtmpte"
Real-Time Messaging Protocol and its variants supported through
librtmp.
.PP
Requires the presence of the librtmp headers and library during
configuration. You need to explicitly configure the build with
\&\*(L"\-\-enable\-librtmp\*(R". If enabled this will replace the native \s-1RTMP\s0
protocol.
.PP
This protocol provides most client functions and a few server
functions needed to support \s-1RTMP, RTMP\s0 tunneled in \s-1HTTP \s0(\s-1RTMPT\s0),
encrypted \s-1RTMP \s0(\s-1RTMPE\s0), \s-1RTMP\s0 over \s-1SSL/TLS \s0(\s-1RTMPS\s0) and tunneled
variants of these encrypted types (\s-1RTMPTE, RTMPTS\s0).
.PP
The required syntax is:
.PP
.Vb 1
\&        <rtmp_proto>://<server>[:<port>][/<app>][/<playpath>] <options>
.Ve
.PP
where \fIrtmp_proto\fR is one of the strings \*(L"rtmp\*(R", \*(L"rtmpt\*(R", \*(L"rtmpe\*(R",
\&\*(L"rtmps\*(R", \*(L"rtmpte\*(R", \*(L"rtmpts\*(R" corresponding to each \s-1RTMP\s0 variant, and
\&\fIserver\fR, \fIport\fR, \fIapp\fR and \fIplaypath\fR have the same
meaning as specified for the \s-1RTMP\s0 native protocol.
\&\fIoptions\fR contains a list of space-separated options of the form
\&\fIkey\fR=\fIval\fR.
.PP
See the librtmp manual page (man 3 librtmp) for more information.
.PP
For example, to stream a file in real-time to an \s-1RTMP\s0 server using
\&\fBavconv\fR:
.PP
.Vb 1
\&        avconv \-re \-i myfile \-f flv rtmp://myserver/live/mystream
.Ve
.PP
To play the same stream using \fBavplay\fR:
.PP
.Vb 1
\&        avplay "rtmp://myserver/live/mystream live=1"
.Ve
.SS "rtp"
.IX Subsection "rtp"
Real-Time Protocol.
.SS "rtsp"
.IX Subsection "rtsp"
\&\s-1RTSP\s0 is not technically a protocol handler in libavformat, it is a demuxer
and muxer. The demuxer supports both normal \s-1RTSP \s0(with data transferred
over \s-1RTP\s0; this is used by e.g. Apple and Microsoft) and Real-RTSP (with
data transferred over \s-1RDT\s0).
.PP
The muxer can be used to send a stream using \s-1RTSP ANNOUNCE\s0 to a server
supporting it (currently Darwin Streaming Server and Mischa Spiegelmock's
 \s-1RTSP\s0 server (\f(CW\*(C`http://github.com/revmischa/rtsp\-server\*(C'\fR)).
.PP
The required syntax for a \s-1RTSP\s0 url is:
.PP
.Vb 1
\&        rtsp://<hostname>[:<port>]/<path>
.Ve
.PP
The following options (set on the \fBavconv\fR/\fBavplay\fR command
line, or set in code via \f(CW\*(C`AVOption\*(C'\fRs or in \f(CW\*(C`avformat_open_input\*(C'\fR),
are supported:
.PP
Flags for \f(CW\*(C`rtsp_transport\*(C'\fR:
.IP "\fBudp\fR" 4
.IX Item "udp"
Use \s-1UDP\s0 as lower transport protocol.
.IP "\fBtcp\fR" 4
.IX Item "tcp"
Use \s-1TCP \s0(interleaving within the \s-1RTSP\s0 control channel) as lower
transport protocol.
.IP "\fBudp_multicast\fR" 4
.IX Item "udp_multicast"
Use \s-1UDP\s0 multicast as lower transport protocol.
.IP "\fBhttp\fR" 4
.IX Item "http"
Use \s-1HTTP\s0 tunneling as lower transport protocol, which is useful for
passing proxies.
.PP
Multiple lower transport protocols may be specified, in that case they are
tried one at a time (if the setup of one fails, the next one is tried).
For the muxer, only the \f(CW\*(C`tcp\*(C'\fR and \f(CW\*(C`udp\*(C'\fR options are supported.
.PP
Flags for \f(CW\*(C`rtsp_flags\*(C'\fR:
.IP "\fBfilter_src\fR" 4
.IX Item "filter_src"
Accept packets only from negotiated peer address and port.
.IP "\fBlisten\fR" 4
.IX Item "listen"
Act as a server, listening for an incoming connection.
.PP
When receiving data over \s-1UDP,\s0 the demuxer tries to reorder received packets
(since they may arrive out of order, or packets may get lost totally). This
can be disabled by setting the maximum demuxing delay to zero (via
the \f(CW\*(C`max_delay\*(C'\fR field of AVFormatContext).
.PP
When watching multi-bitrate Real-RTSP streams with \fBavplay\fR, the
streams to display can be chosen with \f(CW\*(C`\-vst\*(C'\fR \fIn\fR and
\&\f(CW\*(C`\-ast\*(C'\fR \fIn\fR for video and audio respectively, and can be switched
on the fly by pressing \f(CW\*(C`v\*(C'\fR and \f(CW\*(C`a\*(C'\fR.
.PP
Example command lines:
.PP
To watch a stream over \s-1UDP,\s0 with a max reordering delay of 0.5 seconds:
.PP
.Vb 1
\&        avplay \-max_delay 500000 \-rtsp_transport udp rtsp://server/video.mp4
.Ve
.PP
To watch a stream tunneled over \s-1HTTP:\s0
.PP
.Vb 1
\&        avplay \-rtsp_transport http rtsp://server/video.mp4
.Ve
.PP
To send a stream in realtime to a \s-1RTSP\s0 server, for others to watch:
.PP
.Vb 1
\&        avconv \-re \-i <input> \-f rtsp \-muxdelay 0.1 rtsp://server/live.sdp
.Ve
.PP
To receive a stream in realtime:
.PP
.Vb 1
\&        avconv \-rtsp_flags listen \-i rtsp://ownaddress/live.sdp <output>
.Ve
.SS "sap"
.IX Subsection "sap"
Session Announcement Protocol (\s-1RFC 2974\s0). This is not technically a
protocol handler in libavformat, it is a muxer and demuxer.
It is used for signalling of \s-1RTP\s0 streams, by announcing the \s-1SDP\s0 for the
streams regularly on a separate port.
.PP
\fIMuxer\fR
.IX Subsection "Muxer"
.PP
The syntax for a \s-1SAP\s0 url given to the muxer is:
.PP
.Vb 1
\&        sap://<destination>[:<port>][?<options>]
.Ve
.PP
The \s-1RTP\s0 packets are sent to \fIdestination\fR on port \fIport\fR,
or to port 5004 if no port is specified.
\&\fIoptions\fR is a \f(CW\*(C`&\*(C'\fR\-separated list. The following options
are supported:
.IP "\fBannounce_addr=\fR\fIaddress\fR" 4
.IX Item "announce_addr=address"
Specify the destination \s-1IP\s0 address for sending the announcements to.
If omitted, the announcements are sent to the commonly used \s-1SAP\s0
announcement multicast address 224.2.127.254 (sap.mcast.net), or
ff0e::2:7ffe if \fIdestination\fR is an IPv6 address.
.IP "\fBannounce_port=\fR\fIport\fR" 4
.IX Item "announce_port=port"
Specify the port to send the announcements on, defaults to
9875 if not specified.
.IP "\fBttl=\fR\fIttl\fR" 4
.IX Item "ttl=ttl"
Specify the time to live value for the announcements and \s-1RTP\s0 packets,
defaults to 255.
.IP "\fBsame_port=\fR\fI0|1\fR" 4
.IX Item "same_port=0|1"
If set to 1, send all \s-1RTP\s0 streams on the same port pair. If zero (the
default), all streams are sent on unique ports, with each stream on a
port 2 numbers higher than the previous.
VLC/Live555 requires this to be set to 1, to be able to receive the stream.
The \s-1RTP\s0 stack in libavformat for receiving requires all streams to be sent
on unique ports.
.PP
Example command lines follow.
.PP
To broadcast a stream on the local subnet, for watching in \s-1VLC:\s0
.PP
.Vb 1
\&        avconv \-re \-i <input> \-f sap sap://224.0.0.255?same_port=1
.Ve
.PP
Similarly, for watching in avplay:
.PP
.Vb 1
\&        avconv \-re \-i <input> \-f sap sap://224.0.0.255
.Ve
.PP
And for watching in avplay, over IPv6:
.PP
.Vb 1
\&        avconv \-re \-i <input> \-f sap sap://[ff0e::1:2:3:4]
.Ve
.PP
\fIDemuxer\fR
.IX Subsection "Demuxer"
.PP
The syntax for a \s-1SAP\s0 url given to the demuxer is:
.PP
.Vb 1
\&        sap://[<address>][:<port>]
.Ve
.PP
\&\fIaddress\fR is the multicast address to listen for announcements on,
if omitted, the default 224.2.127.254 (sap.mcast.net) is used. \fIport\fR
is the port that is listened on, 9875 if omitted.
.PP
The demuxers listens for announcements on the given address and port.
Once an announcement is received, it tries to receive that particular stream.
.PP
Example command lines follow.
.PP
To play back the first stream announced on the normal \s-1SAP\s0 multicast address:
.PP
.Vb 1
\&        avplay sap://
.Ve
.PP
To play back the first stream announced on one the default IPv6 \s-1SAP\s0 multicast address:
.PP
.Vb 1
\&        avplay sap://[ff0e::2:7ffe]
.Ve
.SS "tcp"
.IX Subsection "tcp"
Trasmission Control Protocol.
.PP
The required syntax for a \s-1TCP\s0 url is:
.PP
.Vb 1
\&        tcp://<hostname>:<port>[?<options>]
.Ve
.IP "\fBlisten\fR" 4
.IX Item "listen"
Listen for an incoming connection
.Sp
.Vb 2
\&        avconv \-i <input> \-f <format> tcp://<hostname>:<port>?listen
\&        avplay tcp://<hostname>:<port>
.Ve
.SS "tls"
.IX Subsection "tls"
Transport Layer Security (\s-1TLS\s0) / Secure Sockets Layer (\s-1SSL\s0)
.PP
The required syntax for a \s-1TLS\s0 url is:
.PP
.Vb 1
\&        tls://<hostname>:<port>
.Ve
.PP
The following parameters can be set via command line options
(or in code via \f(CW\*(C`AVOption\*(C'\fRs):
.IP "\fBca_file\fR" 4
.IX Item "ca_file"
A file containing certificate authority (\s-1CA\s0) root certificates to treat
as trusted. If the linked \s-1TLS\s0 library contains a default this might not
need to be specified for verification to work, but not all libraries and
setups have defaults built in.
.IP "\fBtls_verify=\fR\fI1|0\fR" 4
.IX Item "tls_verify=1|0"
If enabled, try to verify the peer that we are communicating with.
Note, if using OpenSSL, this currently only makes sure that the
peer certificate is signed by one of the root certificates in the \s-1CA\s0
database, but it does not validate that the certificate actually
matches the host name we are trying to connect to. (With GnuTLS,
the host name is validated as well.)
.Sp
This is disabled by default since it requires a \s-1CA\s0 database to be
provided by the caller in many cases.
.IP "\fBcert_file\fR" 4
.IX Item "cert_file"
A file containing a certificate to use in the handshake with the peer.
(When operating as server, in listen mode, this is more often required
by the peer, while client certificates only are mandated in certain
setups.)
.IP "\fBkey_file\fR" 4
.IX Item "key_file"
A file containing the private key for the certificate.
.IP "\fBlisten=\fR\fI1|0\fR" 4
.IX Item "listen=1|0"
If enabled, listen for connections on the provided port, and assume
the server role in the handshake instead of the client role.
.SS "udp"
.IX Subsection "udp"
User Datagram Protocol.
.PP
The required syntax for a \s-1UDP\s0 url is:
.PP
.Vb 1
\&        udp://<hostname>:<port>[?<options>]
.Ve
.PP
\&\fIoptions\fR contains a list of &\-separated options of the form \fIkey\fR=\fIval\fR.
Follow the list of supported options.
.IP "\fBbuffer_size=\fR\fIsize\fR" 4
.IX Item "buffer_size=size"
set the \s-1UDP\s0 buffer size in bytes
.IP "\fBlocalport=\fR\fIport\fR" 4
.IX Item "localport=port"
override the local \s-1UDP\s0 port to bind with
.IP "\fBlocaladdr=\fR\fIaddr\fR" 4
.IX Item "localaddr=addr"
Choose the local \s-1IP\s0 address. This is useful e.g. if sending multicast
and the host has multiple interfaces, where the user can choose
which interface to send on by specifying the \s-1IP\s0 address of that interface.
.IP "\fBpkt_size=\fR\fIsize\fR" 4
.IX Item "pkt_size=size"
set the size in bytes of \s-1UDP\s0 packets
.IP "\fBreuse=\fR\fI1|0\fR" 4
.IX Item "reuse=1|0"
explicitly allow or disallow reusing \s-1UDP\s0 sockets
.IP "\fBttl=\fR\fIttl\fR" 4
.IX Item "ttl=ttl"
set the time to live value (for multicast only)
.IP "\fBconnect=\fR\fI1|0\fR" 4
.IX Item "connect=1|0"
Initialize the \s-1UDP\s0 socket with \f(CW\*(C`connect()\*(C'\fR. In this case, the
destination address can't be changed with ff_udp_set_remote_url later.
If the destination address isn't known at the start, this option can
be specified in ff_udp_set_remote_url, too.
This allows finding out the source address for the packets with getsockname,
and makes writes return with \s-1AVERROR\s0(\s-1ECONNREFUSED\s0) if \*(L"destination
unreachable\*(R" is received.
For receiving, this gives the benefit of only receiving packets from
the specified peer address/port.
.IP "\fBsources=\fR\fIaddress\fR\fB[,\fR\fIaddress\fR\fB]\fR" 4
.IX Item "sources=address[,address]"
Only receive packets sent to the multicast group from one of the
specified sender \s-1IP\s0 addresses.
.IP "\fBblock=\fR\fIaddress\fR\fB[,\fR\fIaddress\fR\fB]\fR" 4
.IX Item "block=address[,address]"
Ignore packets sent to the multicast group from the specified
sender \s-1IP\s0 addresses.
.PP
Some usage examples of the udp protocol with \fBavconv\fR follow.
.PP
To stream over \s-1UDP\s0 to a remote endpoint:
.PP
.Vb 1
\&        avconv \-i <input> \-f <format> udp://<hostname>:<port>
.Ve
.PP
To stream in mpegts format over \s-1UDP\s0 using 188 sized \s-1UDP\s0 packets, using a large input buffer:
.PP
.Vb 1
\&        avconv \-i <input> \-f mpegts udp://<hostname>:<port>?pkt_size=188&buffer_size=65535
.Ve
.PP
To receive over \s-1UDP\s0 from a remote endpoint:
.PP
.Vb 1
\&        avconv \-i udp://[<multicast\-address>]:<port>
.Ve
.SS "unix"
.IX Subsection "unix"
Unix local socket
.PP
The required syntax for a Unix socket \s-1URL\s0 is:
.PP
.Vb 1
\&        unix://<filepath>
.Ve
.PP
The following parameters can be set via command line options
(or in code via \f(CW\*(C`AVOption\*(C'\fRs):
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
Timeout in ms.
.IP "\fBlisten\fR" 4
.IX Item "listen"
Create the Unix socket in listening mode.
.PP
Input devices are configured elements in Libav which allow to access
the data coming from a multimedia device attached to your system.
.PP
When you configure your Libav build, all the supported input devices
are enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-indevs\*(R".
.PP
You can disable all the input devices using the configure option
\&\*(L"\-\-disable\-indevs\*(R", and selectively enable an input device using the
option "\-\-enable\-indev=\fI\s-1INDEV\s0\fR\*(L", or you can disable a particular
input device using the option \*(R"\-\-disable\-indev=\fI\s-1INDEV\s0\fR".
.PP
The option \*(L"\-formats\*(R" of the av* tools will display the list of
supported input devices (amongst the demuxers).
.PP
A description of the currently available input devices follows.
.SS "alsa"
.IX Subsection "alsa"
\&\s-1ALSA \s0(Advanced Linux Sound Architecture) input device.
.PP
To enable this input device during configuration you need libasound
installed on your system.
.PP
This device allows capturing from an \s-1ALSA\s0 device. The name of the
device to capture has to be an \s-1ALSA\s0 card identifier.
.PP
An \s-1ALSA\s0 identifier has the syntax:
.PP
.Vb 1
\&        hw:<CARD>[,<DEV>[,<SUBDEV>]]
.Ve
.PP
where the \fI\s-1DEV\s0\fR and \fI\s-1SUBDEV\s0\fR components are optional.
.PP
The three arguments (in order: \fI\s-1CARD\s0\fR,\fI\s-1DEV\s0\fR,\fI\s-1SUBDEV\s0\fR)
specify card number or identifier, device number and subdevice number
(\-1 means any).
.PP
To see the list of cards currently recognized by your system check the
files \fI/proc/asound/cards\fR and \fI/proc/asound/devices\fR.
.PP
For example to capture with \fBavconv\fR from an \s-1ALSA\s0 device with
card id 0, you may run the command:
.PP
.Vb 1
\&        avconv \-f alsa \-i hw:0 alsaout.wav
.Ve
.PP
For more information see:
<\fBhttp://www.alsa\-project.org/alsa\-doc/alsa\-lib/pcm.html\fR>
.SS "bktr"
.IX Subsection "bktr"
\&\s-1BSD\s0 video input device.
.SS "dv1394"
.IX Subsection "dv1394"
Linux \s-1DV 1394\s0 input device.
.SS "fbdev"
.IX Subsection "fbdev"
Linux framebuffer input device.
.PP
The Linux framebuffer is a graphic hardware-independent abstraction
layer to show graphics on a computer monitor, typically on the
console. It is accessed through a file device node, usually
\&\fI/dev/fb0\fR.
.PP
For more detailed information read the file
Documentation/fb/framebuffer.txt included in the Linux source tree.
.PP
To record from the framebuffer device \fI/dev/fb0\fR with
\&\fBavconv\fR:
.PP
.Vb 1
\&        avconv \-f fbdev \-r 10 \-i /dev/fb0 out.avi
.Ve
.PP
You can take a single screenshot image with the command:
.PP
.Vb 1
\&        avconv \-f fbdev \-frames:v 1 \-r 1 \-i /dev/fb0 screenshot.jpeg
.Ve
.PP
See also <\fBhttp://linux\-fbdev.sourceforge.net/\fR>, and \fIfbset\fR\|(1).
.SS "jack"
.IX Subsection "jack"
\&\s-1JACK\s0 input device.
.PP
To enable this input device during configuration you need libjack
installed on your system.
.PP
A \s-1JACK\s0 input device creates one or more \s-1JACK\s0 writable clients, one for
each audio channel, with name \fIclient_name\fR:input_\fIN\fR, where
\&\fIclient_name\fR is the name provided by the application, and \fIN\fR
is a number which identifies the channel.
Each writable client will send the acquired data to the Libav input
device.
.PP
Once you have created one or more \s-1JACK\s0 readable clients, you need to
connect them to one or more \s-1JACK\s0 writable clients.
.PP
To connect or disconnect \s-1JACK\s0 clients you can use the
\&\fIjack_connect\fR and \fIjack_disconnect\fR programs, or do it
through a graphical interface, for example with \fIqjackctl\fR.
.PP
To list the \s-1JACK\s0 clients and their properties you can invoke the command
\&\fIjack_lsp\fR.
.PP
Follows an example which shows how to capture a \s-1JACK\s0 readable client
with \fBavconv\fR.
.PP
.Vb 2
\&        # Create a JACK writable client with name "libav".
\&        $ avconv \-f jack \-i libav \-y out.wav
\&        
\&        # Start the sample jack_metro readable client.
\&        $ jack_metro \-b 120 \-d 0.2 \-f 4000
\&        
\&        # List the current JACK clients.
\&        $ jack_lsp \-c
\&        system:capture_1
\&        system:capture_2
\&        system:playback_1
\&        system:playback_2
\&        libav:input_1
\&        metro:120_bpm
\&        
\&        # Connect metro to the avconv writable client.
\&        $ jack_connect metro:120_bpm libav:input_1
.Ve
.PP
For more information read:
<\fBhttp://jackaudio.org/\fR>
.SS "libdc1394"
.IX Subsection "libdc1394"
\&\s-1IIDC1394\s0 input device, based on libdc1394 and libraw1394.
.SS "oss"
.IX Subsection "oss"
Open Sound System input device.
.PP
The filename to provide to the input device is the device node
representing the \s-1OSS\s0 input device, and is usually set to
\&\fI/dev/dsp\fR.
.PP
For example to grab from \fI/dev/dsp\fR using \fBavconv\fR use the
command:
.PP
.Vb 1
\&        avconv \-f oss \-i /dev/dsp /tmp/oss.wav
.Ve
.PP
For more information about \s-1OSS\s0 see:
<\fBhttp://manuals.opensound.com/usersguide/dsp.html\fR>
.SS "pulse"
.IX Subsection "pulse"
pulseaudio input device.
.PP
To enable this input device during configuration you need libpulse-simple
installed in your system.
.PP
The filename to provide to the input device is a source device or the
string \*(L"default\*(R"
.PP
To list the pulse source devices and their properties you can invoke
the command \fIpactl list sources\fR.
.PP
.Vb 1
\&        avconv \-f pulse \-i default /tmp/pulse.wav
.Ve
.PP
\fI\fIserver\fI AVOption\fR
.IX Subsection "server AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-server <server name>
.Ve
.PP
Connects to a specific server.
.PP
\fI\fIname\fI AVOption\fR
.IX Subsection "name AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-name <application name>
.Ve
.PP
Specify the application name pulse will use when showing active clients,
by default it is \*(L"libav\*(R"
.PP
\fI\fIstream_name\fI AVOption\fR
.IX Subsection "stream_name AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-stream_name <stream name>
.Ve
.PP
Specify the stream name pulse will use when showing active streams,
by default it is \*(L"record\*(R"
.PP
\fI\fIsample_rate\fI AVOption\fR
.IX Subsection "sample_rate AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-sample_rate <samplerate>
.Ve
.PP
Specify the samplerate in Hz, by default 48kHz is used.
.PP
\fI\fIchannels\fI AVOption\fR
.IX Subsection "channels AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-channels <N>
.Ve
.PP
Specify the channels in use, by default 2 (stereo) is set.
.PP
\fI\fIframe_size\fI AVOption\fR
.IX Subsection "frame_size AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-frame_size <bytes>
.Ve
.PP
Specify the number of byte per frame, by default it is set to 1024.
.PP
\fI\fIfragment_size\fI AVOption\fR
.IX Subsection "fragment_size AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-fragment_size <bytes>
.Ve
.PP
Specify the minimal buffering fragment in pulseaudio, it will affect the
audio latency. By default it is unset.
.SS "sndio"
.IX Subsection "sndio"
sndio input device.
.PP
To enable this input device during configuration you need libsndio
installed on your system.
.PP
The filename to provide to the input device is the device node
representing the sndio input device, and is usually set to
\&\fI/dev/audio0\fR.
.PP
For example to grab from \fI/dev/audio0\fR using \fBavconv\fR use the
command:
.PP
.Vb 1
\&        avconv \-f sndio \-i /dev/audio0 /tmp/oss.wav
.Ve
.SS "video4linux2"
.IX Subsection "video4linux2"
Video4Linux2 input video device.
.PP
The name of the device to grab is a file device node, usually Linux
systems tend to automatically create such nodes when the device
(e.g. an \s-1USB\s0 webcam) is plugged into the system, and has a name of the
kind \fI/dev/video\fIN\fI\fR, where \fIN\fR is a number associated to
the device.
.PP
Video4Linux2 devices usually support a limited set of
\&\fIwidth\fRx\fIheight\fR sizes and framerates. You can check which are
supported using \fB\-list_formats all\fR for Video4Linux2 devices.
.PP
Some usage examples of the video4linux2 devices with avconv and avplay:
.PP
.Vb 2
\&        # Grab and show the input of a video4linux2 device.
\&        avplay \-f video4linux2 \-framerate 30 \-video_size hd720 /dev/video0
\&        
\&        # Grab and record the input of a video4linux2 device, leave the
\&        framerate and size as previously set.
\&        avconv \-f video4linux2 \-input_format mjpeg \-i /dev/video0 out.mpeg
.Ve
.SS "vfwcap"
.IX Subsection "vfwcap"
VfW (Video for Windows) capture input device.
.PP
The filename passed as input is the capture driver number, ranging from
0 to 9. You may use \*(L"list\*(R" as filename to print a list of drivers. Any
other filename will be interpreted as device number 0.
.SS "x11grab"
.IX Subsection "x11grab"
X11 video input device.
.PP
This device allows to capture a region of an X11 display.
.PP
The filename passed as input has the syntax:
.PP
.Vb 1
\&        [<hostname>]:<display_number>.<screen_number>[+<x_offset>,<y_offset>]
.Ve
.PP
\&\fIhostname\fR:\fIdisplay_number\fR.\fIscreen_number\fR specifies the
X11 display name of the screen to grab from. \fIhostname\fR can be
omitted, and defaults to \*(L"localhost\*(R". The environment variable
\&\fB\s-1DISPLAY\s0\fR contains the default display name.
.PP
\&\fIx_offset\fR and \fIy_offset\fR specify the offsets of the grabbed
area with respect to the top-left border of the X11 screen. They
default to 0.
.PP
Check the X11 documentation (e.g. man X) for more detailed information.
.PP
Use the \fIdpyinfo\fR program for getting basic information about the
properties of your X11 display (e.g. grep for \*(L"name\*(R" or \*(L"dimensions\*(R").
.PP
For example to grab from \fI:0.0\fR using \fBavconv\fR:
.PP
.Vb 1
\&        avconv \-f x11grab \-r 25 \-s cif \-i :0.0 out.mpg
\&        
\&        # Grab at position 10,20.
\&        avconv \-f x11grab \-r 25 \-s cif \-i :0.0+10,20 out.mpg
.Ve
.PP
\fI\fIfollow_mouse\fI AVOption\fR
.IX Subsection "follow_mouse AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-follow_mouse centered|<PIXELS>
.Ve
.PP
When it is specified with \*(L"centered\*(R", the grabbing region follows the mouse
pointer and keeps the pointer at the center of region; otherwise, the region
follows only when the mouse pointer reaches within \fI\s-1PIXELS\s0\fR (greater than
zero) to the edge of region.
.PP
For example:
.PP
.Vb 1
\&        avconv \-f x11grab \-follow_mouse centered \-r 25 \-s cif \-i :0.0 out.mpg
\&        
\&        # Follows only when the mouse pointer reaches within 100 pixels to edge
\&        avconv \-f x11grab \-follow_mouse 100 \-r 25 \-s cif \-i :0.0 out.mpg
.Ve
.PP
\fI\fIshow_region\fI AVOption\fR
.IX Subsection "show_region AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        \-show_region 1
.Ve
.PP
If \fIshow_region\fR AVOption is specified with \fI1\fR, then the grabbing
region will be indicated on screen. With this option, it's easy to know what is
being grabbed if only a portion of the screen is grabbed.
.PP
For example:
.PP
.Vb 1
\&        avconv \-f x11grab \-show_region 1 \-r 25 \-s cif \-i :0.0+10,20 out.mpg
\&        
\&        # With follow_mouse
\&        avconv \-f x11grab \-follow_mouse centered \-show_region 1  \-r 25 \-s cif \-i :0.0 out.mpg
.Ve
.PP
\&\fIavconv\fR\|(1), \fIavplay\fR\|(1) and the Libav \s-1HTML\s0 documentation
.PP
The Libav developers
