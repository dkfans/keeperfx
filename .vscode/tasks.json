{
	"version": "2.0.0",
	"tasks": [
		{
			// After the project is first opened, user.json will be created
			"label": "Create user.json",
			"type": "shell",
			"command": "if [ ! -f \"${workspaceFolder}/.vscode/user.json\" ]; then cp \"${workspaceFolder}/.vscode/defaultuser\" \"${workspaceFolder}/.vscode/user.json\" && echo \"/.vscode/user.json was created, please edit it and fill in your game directory.\"; fi",
			"problemMatcher": "$gcc",
			"runOptions": {
				"runOn": "folderOpen"
			},
			"group": "build",
			"presentation": {
				"echo": false,
				"focus": true,
				"panel": "shared",
				"showReuseMessage": false
			}
		},
		{
			"label": "Check For jq Installation",
			"type": "shell",
			"command": "jq --version > /dev/null 2>&1 || (echo -e '\\033[0;91mError: jq is not installed. Please install it using: sudo apt-get install jq\\033[0m' && exit 1)",
			"problemMatcher": "$gcc",
			"group": "build",
			"presentation": {
				"echo": false,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": false
			}
		},
		{
			"label": "Check For Game Directory",
			"type": "shell",
			"command": "echo -e '\\033[0;97mSource Code directory: ${workspaceFolder}\\033[0m'; game_dir=$(jq -r '.game_directory' ${workspaceFolder}/.vscode/user.json); if [ ! -d \"$game_dir\" ]; then echo -e '\\033[0;91mGame directory missing in .vscode/user.json. Please edit the file and update it.\\033[0m'; exit 1; else echo -e '\\033[0;97mGame directory: ' $game_dir '\\033[0m'; fi",
			"problemMatcher": "$gcc",
			"dependsOn": "Check For jq Installation",
			"group": "build",
			"presentation": {
				"echo": false,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": false
			}
		},
		{
			"label": "Compile",
			"type": "shell",
			"command": "make -j`nproc` all && echo -e '\\033[0;32mCompilation successful!\\033[0m'",
			"problemMatcher": "$gcc",
			"dependsOn": "Check For Game Directory",
			"group": "build",
			"presentation": {
				"echo": false,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": false,
			}
		},
		{
			"label": "Copy Files",
			"type": "shell",
			"command": "game_dir=$(jq -r '.game_directory' ${workspaceFolder}/.vscode/user.json); cd \"$game_dir\" && cp \"${workspaceFolder}/bin/\"* .",
			"problemMatcher": "$gcc",
			"dependsOn": "Compile",
			"group": "build",
			"presentation": {
				"echo": false,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": false,
			}
		},
		{
			"label": "Compile, Copy Files, Run Game",
			"type": "shell",
			"command": "game_dir=$(jq -r '.game_directory' ${workspaceFolder}/.vscode/user.json); game_args=$(jq -r '.game_arguments' ${workspaceFolder}/.vscode/user.json); cd \"$game_dir\" && if [ -n \"$WSL_DISTRO_NAME\" ]; then cmd.exe /C \"keeperfx.exe $game_args\"; else wine 'keeperfx.exe' $game_args; fi",
			"problemMatcher": "$gcc",
			"dependsOn": "Copy Files",
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"presentation": {
				"echo": false,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": false,
			}
		},
		{
			"label": "Log",
			"type": "shell",
			"command": "game_dir=$(jq -r '.game_directory' ${workspaceFolder}/.vscode/user.json); cd \"$game_dir\" && > keeperfx.log && less +F --mouse keeperfx.log",
			"problemMatcher": "$gcc",
			"dependsOn": "Check For Game Directory",
			"group": "build"
		},
		{
			"label": "Clean",
			"type": "shell",
			"command": "make -j`nproc` clean",
			"problemMatcher": "$gcc",
			"group": "build"
		},
		{
			"label": "Generate compile_commands.json",
			"type": "shell",
			"command": "make clean-build clean-tools && bear -- make -j2 standard",
			"problemMatcher": "$gcc",
			"group": "build",
			"dependsOn": "Compile",
		}
	]
}